<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Applications.Telemetry</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Applications.Telemetry.AggregatedMetricData">
            <summary>
            Provides required and optional fields for the LogAggregatedMetric method.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AggregatedMetricData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AggregatedMetricData.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Constructor which accepts required fields
            </summary>
            <param name="name">Name of the operation</param>
            <param name="duration">Duration in microseconds</param>
            <param name="count">Number of samples</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.ObjectClass">
            <summary>
            String indicating the object class on which the AggregatedMetric
            is being measured. Example: Component
            [Optional]
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.ObjectId">
            <summary>
            Optional string indicating the object id on which the AggregatedMetric 
            is being measured. Example: RecordBatcher
            [Optional]
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.Name">
            <summary>
            The name of the metric 
            [Required]
            Example: "Request Throughput"
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.InstanceName">
            <summary>
            An instance name for the counter. Implementation specific.
            Examples: For API metrics, the API name (RetrieveDashboardData)
            [Optional]
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.Duration">
            <summary>
            This is the duration in microseconds the counter covers.
            [Required]
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.Count">
            <summary>
            This is the total count of observations recorded in the time window specified.
            [Required]
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.Aggregates">
            <summary>
            This is a vector of the aggregate metrics being reported.
            The types of aggregates are specified by the AggregateType enum
            [Optional]
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.Buckets">
            <summary>
            Frequency table is an optional way to report summary
            of the observations. Buckets are specified by the user
            of the API.
            [Optional] 
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AggregatedMetricData.Units">
            <summary>
            A string representing units for the metric.
            [Optional]
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AggregatedMetricData.Validate">
            <summary>
            Validate
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.CloudServiceData.ServiceName">
            <Summary>
            This is the name of the Cloud Service. It should be populated for both Azure as well AutoPilot based Cloud Services.
            E.g. Microsoft.Cloud.Skype.CallController in Azure.
            E.g. Xflow in AutoPilot.
            [Required for both Azure and Server]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.CloudServiceData.RoleName">
            <Summary>
            Name of the Role that comprises the Cloud Service.
            For Azure Cloud Services this is the RoleName such as ControllerRole
            For Server and AP based Cloud Services this is the AP Machine Function like Workflow-Manager-Web-Service
            [Required for Server] [Autopopulated for Azure]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.CloudServiceData.DeploymentId">
            <Summary>
            This is the ID that describes a unique deployment of the CloudService.
            [Required for Server] [Autopopulated for Azure]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.CloudServiceData.RoleInstanceName">
            <Summary>
            Instance id of the deployed role instance generating the event.
            Example: ControllerRole_IN_2 in Azure, AP machine name like CY2SCH030070544 in AP.
            [Required for Server] [Autopopulated for Azure]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.CloudServiceData.DeploymentEnvironment">
            <Summary>
            Service deployment environment (e.g. Prod, Test, Int, Stage). 
            [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.CloudServiceData.RoleVersion">
            <Summary>
            Build version of the role. Recommended formats are either semantic version, or NT style:
            MajorVersion.MinorVersion.Optional Milestone.BuildNumber.Architecture.Branch.yyMMdd-hhmm
            e.g. "130.0.4590.3525.amd64fre.rd_fabric_n.140618-1229".
            [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.CloudServiceData.RoleLocation">
            <Summary>
            Deployed location of the role instance. This should be the canonical name of datacenter.
            Example: "eastus" in Azure, "AP-BN1" in Server
            [Optional]
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ActionType">
            <Summary>
            Types listed below are generalized logical concepts. Each type may corresponds to multiple raw action types E.g. Click can be from LButtonDown or TouchTap They are commonly used to identify user engagement on the page.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionType.Unknown">
            <Summary>
            No set to any value.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionType.Other">
            <Summary>
            Explicitly set as Unknown
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionType.Click">
            <Summary>
            Explicitly set as not in the below types Generic actions
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionType.Pan">
            <Summary>
            Navigate through contents. It can either result in browsing the same content Or it can also result in changing content. The consequence is decided by the next Event/PageView
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionType.Zoom">
            <Summary>
            Zoom in or out to change the scale of the content.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionType.Hover">
            <Summary>
            E.g. Mouse hover on a target item.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.AggregateType">
            <Summary>
            AggregateType indicates the type of Aggregate metric being reported. Reported in the Aggregate member of the AggregatedMetric
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AggregateType.Sum">
            <Summary>
            Total value
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AggregateType.Maximum">
            <Summary>
            Maximum value
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AggregateType.Minimum">
            <Summary>
            Minimum value
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AggregateType.SumOfSquares">
            <Summary>
            Sum of squares (to calculate variance)
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AggregateType.Average">
            <Summary>
            Average of values
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ApiType">
            <Summary>
            ApiType
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ApiType.None">
            <Summary>
            Not specified
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ApiType.ServiceApi">
            <Summary>
            API service
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ApiType.ClientProxy">
            <Summary>
            Client Proxy
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.AppLifeCycleState">
            <Summary>
            Application life cycle states
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AppLifeCycleState.Unknown">
            <Summary>
            Unknown
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AppLifeCycleState.Launch">
            <Summary>
            Launch
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AppLifeCycleState.Exit">
            <Summary>
            Exit
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AppLifeCycleState.Suspend">
            <Summary>
            Suspend
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AppLifeCycleState.Resume">
            <Summary>
            Resume
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AppLifeCycleState.Foreground">
            <Summary>
            Foreground
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.AppLifeCycleState.Background">
            <Summary>
            Background
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Constants.DataModelType">
            <summary>
            <para>
            Static class that is used define the various types of data models.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.HealthDimensionType">
            <summary>
            Dimension of health being reported.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.HealthColor">
            <summary>
            The health color being reported.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.InputDeviceType">
            <Summary>
            Input Device Type
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.InputDeviceType.Unknown">
            <Summary>
            No set to any value.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.InputDeviceType.Other">
            <Summary>
            Explicitly set as Unknown
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.InputDeviceType.Mouse">
            <Summary>
            Explicitly set as not in the below types
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.NetworkType">
            <summary>
            Network type
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.NetworkType.Unknown">
            <Summary>
            Default value which indicates the NetworkType is not known.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.NetworkType.Wired">
            <Summary>
            Network type indicating wired local area network connections, such as ethernet.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.NetworkType.Wifi">
            <Summary>
            Network type indicating wireless local area network protocol.  Examples include the IEEE 802.11 family of wireless protocols.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.NetworkType.WWAN">
            <Summary>
            Network type indicating wireless wide area network protocol, used for mobile cellular networks.  Examples include 3G protocols (UMTS, CDMA, EDGE) and 4G protocols (WiMAX, LTE).
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.OsArchitectureType">
            <Summary>
            OS Architecture type
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.OsArchitectureType.Unknown">
            <Summary>
            Unknown or not available
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.OsArchitectureType.X86">
            <Summary>
            OS architecture in 32-bit (x86) mode
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.OsArchitectureType.X64">
            <Summary>
            OS architecture in 64-bit (x64) mode
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.OsArchitectureType.Arm">
            <Summary>
            OS architecture for ARM-family
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.PiiType">
            <Summary>
            PiiType indicates the type of PII (personally identifiable information) for a property value.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.None">
            <Summary>
            Default value which indicates the property value is not PII.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.DistinguishedName">
            <Summary>
            PII type indicating a distinguished name (DN).  For example, "CN=Jeff Smith,OU=Sales,DC=Fabrikam,DC=COM".
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.GenericData">
            <Summary>
            PII type indicating a generic data value.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.IPv4Address">
            <Summary>
            PII type indicating an IPv4 address.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.IPv6Address">
            <Summary>
            PII type indicating an IPv6 address.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.MailSubject">
            <Summary>
            PII type indicating an e-mail subject.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.PhoneNumber">
            <Summary>
            PII type indicating a phone number.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.QueryString">
            <Summary>
            PII type indicating a query string.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.SipAddress">
            <Summary>
            PII type indicating a SIP-protocol URI address.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.SmtpAddress">
            <Summary>
            PII type indicating an e-mail (SMTP) address.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.Identity">
            <Summary>
            PII type indicating a user id or name.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.Uri">
            <Summary>
            PII type indicating a uniform resource identifier (URI).
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.Fqdn">
            <Summary>
            PII type indicating a fully-qualified domain name (FQDN).
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.PiiType.IPv4AddressLegacy">
            <Summary>
            PII type indicating an IPv4 address. Supports scrubbing of the last octet in an IPv4 address. E.g. 10.121.227.147 becomes 10.121.227.*
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.RawActionType">
            <Summary>
            This enum corresponds to a physical action that user has performed.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.RawActionType.Unknown">
            <Summary>
            No set to any value.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.RawActionType.Other">
            <Summary>
            Explicitly set as Unknown
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.RawActionType.LButtonDoubleClick">
            <Summary>
            Explicitly set as not in the below types Mouse actions Reference: https://msdn.microsoft.com/en-us/library/windows/desktop/ff468877(v=vs.85).aspx Some fields related to X button and Non-client area are excluded for now to simply usage.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.RawActionType.MouseHWheel">
            <Summary>
            Defined as mouse hover over an area for a period of time.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.RawActionType.TouchTap">
            <Summary>
            Multi-touch actions References: http://en.wikipedia.org/wiki/Multi-touch#Multi-touch_gestures
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.RawActionType.KeyboardPress">
            <Summary>
            Keyboard actions
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ResultType.Unknown">
            <Summary>
            Unknown
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ResultType.Success">
            <Summary>
            Operation succeeded
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ResultType.Failure">
            <Summary>
            Operation failed
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ResultType.CallerError">
            <Summary>
            Caller provided invalid arguments, causing failure
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ResultType.Timeout">
            <Summary>
            The timeout for the operation expired.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ResultType.Cancelled">
            <Summary>
            The operation was cancelled.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.SdkModeType">
            <Summary>
            SdkModeType indicates the type of record route
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.SdkModeType.Aria">
            <Summary>
            Send to Aria
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.SdkModeType.DataBusAgent">
            <Summary>
            Send to DBA
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.TraceLevel">
            <summary>
            Trace Level
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.TraceLevel.None">
            <Summary>
            Unknown
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.TraceLevel.Error">
            <Summary>
            Error
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.TraceLevel.Warning">
            <Summary>
            Warning
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.TraceLevel.Information">
            <Summary>
            Information
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.TraceLevel.Verbose">
            <Summary>
            Verbose
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.EventProperties">
            <summary>
            EventProperties class allows customization of the event properties, and sending of custom key value pairs, including PII data.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.#ctor(System.String)">
            <summary>
            Creates a new EventProperties object with the name of the event.
            </summary>
            <param name="name">the name of the event. This is required if you are adding additional properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Constructor which accepts a dictionary of properties without PII information.
            </summary>
            <param name="properties"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Constructor which accepts a dictionary of properties without PII information.
            Please note that object value in the dictionary should be one of the following types:
                1) long/Int64
                2) double
                3) bool
                4) DateTime
                5) String 
                6) Guid
            Other types will be considered as String.
            
            Note: Using this to set properties will cause the properties to be boxed as objects and 
            then unboxed again later into their types. Recommendation is to use
            SetProperty.
            
            </summary>
            <param name="properties"></param>
            <param name="name"></param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.EventProperties.Properties">
            <summary>
            Property dictionary that can be used to add custom extensions to the logged event.
            Please note that object value in the dictionary should be one of the following types:
                1) long/Int64
                2) double
                3) bool
                4) DateTime
                5) String 
                6) Guid
            Other types will be considered as String.
            
            Note: The dictionary returned is treated as read only. To add new values use SetProperty.
            Changes made to the returned dictionary are not reflected internally.
            
            Note: Using this to set properties will cause the properties to be boxed as objects and 
            then unboxed again later into their types. Recommendation is to use
            SetProperty.
            
            If you need to mark a property as PII please use the SetProperty method.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.EventProperties.PiiProperties">
            <summary>
            Bag that identifies the properties in the Properties dictionary marked as PII.
            Note: The corresponding raw value is in the Properties dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.EventProperties.Timestamp">
            <summary>
            Override the timestamp on the event being sent, which is set to the current time by default.
            You would typically override the timestamp for replay or simulation scenarios. 
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.EventProperties.Name">
            <summary>
            Specify a name for this event. This is required if you send any custom key, value pairs.
            It is not required if you only override the TimeStamp of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.EventProperties.Type">
            <summary>
            Specify a type for this event. The type provided will be prefixed with the string
            "Custom.".
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.EventProperties.IsTypeSetInternaly">
            <summary>
            Determines if the event type has been set for an internal event (in which case we allow overrides of semantic 
            api's other than LogEvent).
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.SetProperty(System.String,System.String,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named property and potentially tag it as PII.
            </summary>
            <param name="key">Property name</param>
            <param name="value">Property value</param>
            <param name="piiKind">PII kind of property</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.SetProperty(System.String,System.Double,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named custom double property to the event and potentially tag it as PII.
            </summary>
            <param name="key">Property name</param>
            <param name="value">Property value</param>
            <param name="piiKind">PII kind of property</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.SetProperty(System.String,System.Int64,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named custom integer property to the event.
            </summary>
            <param name="key">Property name</param>
            <param name="value">Property value</param>
            <param name="piiKind">PII kind of property</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.SetProperty(System.String,System.Boolean,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named custom bool property to the event.
            </summary>
            <param name="key">Property name</param>
            <param name="value">Property value</param>
            <param name="piiKind">PII kind of property</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.SetProperty(System.String,System.DateTime,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named datetime property to the event.
            </summary>
            <param name="key">Property name</param>
            <param name="value">Property value</param>
            <param name="piiKind">PII kind of property</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.SetProperty(System.String,System.Guid,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named GUID property to the event.
            </summary>
            <param name="key">Property name</param>
            <param name="value">Property value</param>
            <param name="piiKind">PII kind of property</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.EventProperties.SetProperty(System.String,System.Object)">
            <summary>
            Checks the type of the value and calls the appropriate
            SetProperty method by casting the value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.IRecordSink">
            <summary>
            Interface used to mock InternalLogger
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.RecordSink">
            <summary>
            IRecordSink implementation
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.DataPackage">
            <Summary>
            Container for a group of Records from the same Source.
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.Type">
            <Summary>
            Type
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.Source">
            <Summary>
            Source
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.Version">
            <Summary>
            Version
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.Ids">
            <Summary>
            Ids
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.DataPackageId">
            <Summary>
            DataPackageId
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.Timestamp">
            <Summary>
            Timestamp
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.SchemaVersion">
            <Summary>
            This name deliberately does not match the one in protobuf (Schema), as this would cause a clash in Bond generated code...
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.Records">
            <Summary>
            Records
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.DataPackage.Receipts">
            <Summary>
            Receipts
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.DataPackage.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.DataPackage.#ctor">
            <Summary>
            This name deliberately does not match the one in protobuf (Schema), as this would cause a clash in Bond generated code...
            </Summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.DataPackage.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.DateTimeExtensions">
            <summary>
            Helper class which provides DateTime to/from milliseconds since Epoch conversion.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.DateTimeExtensions.ToEpochMillis(System.DateTime)">
            <summary>
                Converts a DateTime to milliseconds since Epoch.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>Milliseconds since Epoch</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.DateTimeExtensions.FromEpochMillis(System.Int64)">
            <summary>
                Returns a DateTime representing the number of milliseconds since Epoch.
            </summary>
            <param name="epochMillis">The number of milliseconds since Epoch.</param>
            <returns>A DateTime representing the number of milliseconds since Epoch.</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Endpoint">
            <Summary>
            Endpoint
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Endpoint.EndpointValue">
            <Summary>
            EndpointValue
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Endpoint.EndpointType">
            <Summary>
            EndpointType
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Endpoint.HashedEndpoint">
            <Summary>
            HashedEndpoint
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Endpoint.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Endpoint.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Pstn">
            <Summary>
            Pstn
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Pstn.PstnNumber">
            <Summary>
            PstnNumber
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Pstn.HashedPstn">
            <Summary>
            HashedPstn
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Pstn.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Pstn.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Record">
            <summary>
            Represents single event which is sent to Skype Data RV pipeline.
            </summary>
            <Summary>
            One instance of a log Record.
            </Summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Record.#ctor(System.String,System.String)">
            <summary>
            Creates instance of the class basing on <paramref name="type"/> and <paramref name="eventType"/>
            </summary>
            <param name="type">type of record</param>
            <param name="eventType">type of event represented by the record</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.Valid">
            <summary>
            Checks for the validity of the record. Please see the IsValid method for additional information about the requirements of a valid method.
            </summary>
            <returns>true if this record is valid, false it not.</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)">
            <summary>
            Checks if a record follows the following guidelines:
            <list type="bullet">
            <item><term>Guid</term> <description>(Id) needs to not empty, not null)</description></item>
            <item><term>Type</term> <description> should not be null or empty</description></item>
            <item><term>EventType</term> <description> should not be null or empty</description></item>
            <item><term>Timestamp</term> <description> must be older or equal to the 2000/1/1</description></item>
            </list>
            </summary>
            <param name="reason">
            In case of an invalid record, the reason contains a message of what went wrong. If everything is valid, it will just be empty.
            </param>
            <returns>
            true if valid (reason is empty), false if invalid (reason contains a comprehensive error to debug the issue).
            </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Record.Init">
            <summary>
            Initializes fields
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Record.EscapeEventType(System.String)">
            <summary>
            Escape <paramref name="eventType"/> so that it matches <see cref="F:Microsoft.Applications.Telemetry.External.Preconditions.EventTypeAndNameRules"/>. In particular:
            <list>
            <item>removes all non-alphanumeric characters from the beginning and end</item>
            <item>throws exception if remaining part is shorter than 4 characters</item>
            <item>replaces all remaining non-alphanumeric characters with '_'</item>
            <item>truncates to the first 100 characters if it's longer</item>
            </list>
            </summary>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.Id">
            <Summary>
            Id
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.Context">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.Timestamp">
            <Summary>
            Timestamp
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ConfigurationIds">
            <Summary>
            ConfigurationIds
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.Type">
            <Summary>
            Type
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.EventType">
            <Summary>
            EventType
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ResultCode">
            <Summary>
            ResultCode
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ResultDetail">
            <Summary>
            ResultDetail
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ResultValue">
            <Summary>
            ResultValue
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.InitiatingUser">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.InitiatingUserEndpoint">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.TargetUsers">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.Extension">
            <Summary>
            Extension
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.SampleTimestamp">
            <Summary>
            SampleTimestamp
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.SampleRate">
            <Summary>
            SampleRate
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.SamplingData">
            <Summary>
            SamplingData
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.InitiatingUiVersion">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.PstnNumbers">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ContextIds">
            <Summary>
            ContextIds
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.InitiatingUserEndpointType">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.InitiatingUserComposite">
            <Summary>
            InitiatingUserComposite
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.TargetUsersComposite">
            <Summary>
            TargetUsersComposite
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.PstnNumbersComposite">
            <Summary>
            PstnNumbersComposite
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.RecordType">
            <Summary>
            RecordType
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ExtensionInt64">
            <Summary>
            ExtensionInt64
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ExtensionDouble">
            <Summary>
            ExtensionDouble
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ConferenceComposite">
            <Summary>
            27 is reserved on server side
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.ExceptionInfo">
            <Summary>
            ExceptionInfo
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.PIIExtensions">
            <Summary>
            PIIExtensions
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.TypedExtensionBoolean">
            <Summary>
            TypedExtensionBoolean
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.TypedExtensionDateTime">
            <Summary>
            TypedExtensionDateTime
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.TypedExtensionInt64">
            <Summary>
            TypedExtensionInt64
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.TypedExtensionDouble">
            <Summary>
            TypedExtensionDouble
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Record.TypedExtensionGuid">
            <Summary>
            TypedExtensionGuid
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Record.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Record.#ctor">
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            27 is reserved on server side
            </Summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Record.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.User">
            <summary>
            User representation.
            </summary>
            <Summary>
            User
            </Summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.User.#ctor(System.String)">
            <summary>
            Create user basing on provided <paramref name="username"/>.
            </summary>
            <param name="username">name of a user</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.Username">
            <Summary>
            Username
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.Prefix">
            <Summary>
            Prefix
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.UiVersion">
            <Summary>
            UiVersion
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.Endpoint">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.EndpointType">
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.Pstn">
            <Summary>
            Pstn
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.EndpointComposite">
            <Summary>
            EndpointComposite
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.UserExtension">
            <Summary>
            UserExtension
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.User.Email">
            <Summary>
            Email
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.User.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.User.#ctor">
            <Summary>
            Deprecated
            </Summary>
            <Summary>
            Deprecated
            </Summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.User.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.ExceptionInfo">
            <Summary>
            ExceptionInfo
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.ExceptionInfo.Type">
            <Summary>
            Type
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.ExceptionInfo.Message">
            <Summary>
            Message
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.ExceptionInfo.FullInfo">
            <Summary>
            FullInfo
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.ExceptionInfo.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.ExceptionInfo.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Conference">
            <Summary>
            Conference
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Conference.ConferenceUri">
            <Summary>
            ConferenceUri
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Conference.DomainName">
            <Summary>
            DomainName
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.Conference.UriScheme">
            <Summary>
            UriScheme
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.Conference.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.Conference.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.RecordType">
            <Summary>
            An enum with all the supported types for a record.
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DataModels.RecordType.PerformanceCounter">
            <Summary>
            Deprecated, please use PerformanceCounterAzure and PerformanceCounterGfs instead
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.PIIScrubber">
            <Summary>
            The various PII Scrubbers that we support.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.PIIKind">
            <Summary>
            PIIKind
            </Summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DataModels.PIIKind.IPV4AddressLegacy">
            <Summary>
            Supports scrubbing of the last octet in a IPV4 address. E.g. 10.121.227.147 becomes 10.121.227.*
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.PII">
            <Summary>
            Contains information on how to scrub and what the content is
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.PII.ScrubType">
            <Summary>
            This specifies whether we should use a O365Scrubber or SkypeBIScrubber or DataRVScrubber and any others that we might support.
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.PII.Kind">
            <Summary>
            Specifies what type of PII is being sent.
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.PII.RawContent">
            <Summary>
            This content will be PII when its sent to the collector.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.PII.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.PII.#ctor">
            <Summary>
            This specifies whether we should use a O365Scrubber or SkypeBIScrubber or DataRVScrubber and any others that we might support.
            </Summary>
            <Summary>
            Specifies what type of PII is being sent.
            </Summary>
            <Summary>
            This content will be PII when its sent to the collector.
            </Summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.PII.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.ClientToCollectorRequest">
            <Summary>
            The top-level struct that is used between clients and the Collectors.
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.ClientToCollectorRequest.DataPackages">
            <Summary>
            DataPackages
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.ClientToCollectorRequest.RequestRetryCount">
            <Summary>
            RequestRetryCount
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataModels.ClientToCollectorRequest.TokenToDataPackagesMap">
            <Summary>
            TokenToDataPackagesMap
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataModels.ClientToCollectorRequest.Schema">
            <summary>
            Meta schema.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataModels.ClientToCollectorRequest.Reset">
            <Summary>
            Reset instance and re-initialize the members.
            </Summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DictionaryExtension">
            <summary>
            Implements a merge extention method for IDictionary
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DictionaryExtension.Merge``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2})">
            <summary>
            Merge dictionary
            </summary>
            <typeparam name="TK">Key type</typeparam>
            <typeparam name="TVp">Low priority value type, must be a parent-type of Vsub</typeparam>
            <typeparam name="TVsub">High priority value type, must be a sub-type of Vp</typeparam>
            <param name="dlowpri">IDictionary with low priority</param>
            <param name="dhighpri">IDictionary with high priority</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DBATelemetryManager">
            <summary>
            Data bus agent implementation of <see cref="T:Microsoft.Applications.Telemetry.ITelemetryManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.#ctor(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings)">
            <summary>
            <para>
            Creates new instance of <see cref="T:Microsoft.Applications.Telemetry.DBATelemetryManager"/> basing on
            <paramref name="settings"/>.
            </para>
            </summary>
            <param name="settings">
            settings which will be used by the new instance of the <see cref="T:Microsoft.Applications.Telemetry.DBATelemetryManager"/>
            </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.WaitUntilAllRecordsAreSent">
            <summary>
      <para>
        Wait until all records added to the library so far have been sent (or dropped
        e.g. because of network problems).
      </para>
      <para>
        This method is thread safe. You can call it many times in parallel as well as you can call
        <see cref="M:Microsoft.Applications.Telemetry.DBATelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)" /> when it's being executed.
      </para>
      <para>
        This method is VERY EXPENSIVE compared to others. It requires a lot of synchronization.
        It also slows down processing of new records, actually new records are not processed at
        all while this method is in progress. Instead, they are accumulated in dedicated queue
        and transfered to the primary queue when this operation is done.
      </para>
      <para>
        If second call to this method is issued before the first finished then the second call
        will wait until records added to the library between the first and the second call are sent.
        If there were no records added between two calls to 
        If there were no records added between two calls to 
        then the second one will be obviously flush no records.
      </para>
      <para>
        If execution of this method is longer than <c>TelemetryManagerSettings.WaitUntilNoRecordsTimeout</c>
        then <see cref="T:System.OperationCanceledException" /> exception is thrown.
        The timer starts after all previous calls to finished.
        The timer starts after all previous calls to finished.
      </para>
      <remarks>
        You mustn't call this method after a call to .
        You mustn't call this method after a call to .
      </remarks>
      <remarks>
        DISCLAMER: This method is not part of supported API. Currently this method is experimental
        and can change or be removed anytime without any notice!!!
      </remarks>
    </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DBATelemetryManager.Settings">
            <summary>
      <para>
        Gets the current settings used by the Telemetry Manager.
        Please note that returned object is immutable.
      </para>
    </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.GetTelemetryManagerEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.GetTelemetryEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="record">A record to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.SendRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="records">Records to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.SendRecordWithToken(Microsoft.Applications.Telemetry.DataModels.Record,System.String)">
            <summary>
            Note: This method should only be used if you need the telemetry manager to support more than one tenant token.
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="record">A record to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.SendRecordsWithToken(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)">
            <summary>
            Note: This method should only be used if you need the telemetry manager to support more than one tenant token.
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="records">Records to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DBATelemetryManager._disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.Dispose(System.Boolean)">
            <summary>
            Dispose instance
            </summary>
            <param name="disposing">Dispose or finalize</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.ValidateRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.RecordWithMetadata})">
            <summary>
            Validates all <paramref name="records"/>.
            Throws <see cref="T:System.ArgumentException"/> if a record is not valid.
            </summary>
            <param name="records">records to validate</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.SendRecordsWithMetadata(System.String,System.Collections.Generic.List{Microsoft.Applications.Telemetry.RecordWithMetadata},System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            Send records to DBA
            </summary>
            <param name="tenantToken">Tenant token</param>
            <param name="recordsWithMetadatas">List of records with meta data</param>
            <param name="records">List of records</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DBATelemetryManager.SetDefaultLoggerForTesting(Microsoft.Office.BigData.DataLoader.IATLogger)">
            <summary>
            Used for test
            </summary>
            <param name="dbalogger">Fake DBA logger</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.EventsRejectedArgs">
            <summary>
            Arguments for the event when events are rejected.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.EventsRejectedArgs.EventsRejectedReason">
            <summary>
            Enum to identify the reason events were rejected.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsRejectedArgs.EventsRejectedReason.SizeLimitExceeded">
            <summary>
            Events dropped when they exceed the size limit for a single event.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.EventsRejectedArgs.RejectedReason">
            <summary>
            Reason for rejecting the events.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.EventsRetryingArgs">
            <summary>
            Arguments for the event when events are going to be retried.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.EventsRetryingArgs.EventsRetryReason">
            <summary>
            Enum to identify the reason events are going to be retried.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsRetryingArgs.EventsRetryReason.RetryableHttpStatus">
            <summary>
            Events will be retried in the same request due to the collector 
            returing an http status for which we should retry.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsRetryingArgs.EventsRetryReason.EventsRetriedAfterDequeue">
            <summary>
            Events will be retried in a different request after they had been
            dequeued.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.EventsRetryingArgs.RetryReason">
            <summary>
            Reason for retrying to send the events.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs">
            <summary>
            Arguments for the event when events are dropped.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason">
            <summary>
            Enum to identify the reason events were dropped.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason.Unknown">
            <summary>
            Status indicating that events were probably dropped because 
            an exception has occured (please consult the trace log).
            This is likely to be a problem in the library.
            This exception might not be accurate in some cases, because we don't track
            every exact path of a data loss.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason.NonRetryableHttpStatus">
            <summary>
            Events dropped when the http status code returned by the
            collector states that the SDK should not retry the request again.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason.DequeueCountExceeded">
            <summary>
            Events dropped because their dequeue count was exceeded. This means
            they can no longer be retried as part of different request.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason.MemoryLimitReached">
            <summary>
            Events dropped because the number of events that can be kept in memory
            has been reached.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason.TenantTokenKilled">
            <summary>
            Events dropped when the collector has marked the tenant token for the events
            to be killed.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.DroppedReason">
            <summary>
            Reason for dropping the events.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.EventsSentArgs">
            <summary>
            Arguments for the event when telemetry events are sent successfully.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsSentHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsSent"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsDroppedHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsDropped"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRejectedHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRejected"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRetryingHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRetrying"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsSent">
            <summary>
            <para>
            Occurs when events are successfully sent to the collector. 
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsDropped">
            <summary>
            <para>
            Occurs when events are dropped. This event can be raised when:
               1) The dequeue count for the events is exceeded and they are dropped.
               2) The events are dropped due to a non retryable http status response from the collector.
               3) Events dropped because the number of events that can be kept in memory has been reached.
               4) An exception has occured.
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRejected">
            <summary>
            <para>
            Occurs when events are rejected by the SDK because they are invalid. 
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRetrying">
            <summary>
            <para>
            Occurs when we are going to retry to send events to the collector. 
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryEvents.TriggerEventsSent(System.Int64)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsSent"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryEvents.TriggerEventsDropped(System.Int64,Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsDropped"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryEvents.TriggerEventsRejected(System.Int64,Microsoft.Applications.Telemetry.Events.EventsRejectedArgs.EventsRejectedReason)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRejected"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryEvents.TriggerEventsRetrying(System.Int64,Microsoft.Applications.Telemetry.Events.EventsRetryingArgs.EventsRetryReason)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryEvents.EventsRetrying"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryEventsArgs">
            <summary>
            Common arguments for all the telemetry events.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.TelemetryEventsArgs.EventsCount">
            <summary>
            The count of events that are the subject of this event.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.RecordsArgs">
            <summary>
            Base class for all EventArgs with Records.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.RecordsArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            Constructs the class instance basing on provided <paramref name="records"/>
            </summary>
            <param name="records">records related to the event</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.RecordsArgs.Records">
            <summary>
            The records that are subject of this event.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs">
            <summary>
            Arguments for the event when a record package is dropped due to memory limitation or too big Record.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.Reason,System.String)">
            <summary>
            Constructs the class instance basing on provided <paramref name="records"/>
            and <paramref name="droppingReason"/>.
            </summary>
            <param name="records">records which has just been dropped</param>
            <param name="droppingReason">reason why the records has been dropped</param>
            <param name="datapackageIdentifier">the identifier of the datapackage that was dropped</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.Reason">
            <summary>
            Enumerates reasons of dropping records.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.Reason.MemoryLimitAchieved">
            <summary>
            Status indicating that Records was dropped in order not to exceed recordsKeptInMemoryLimit.
                
            To get rid of this error one can increase recordsKeptInMemoryLimit in configuration.
            This will cause higher memory usage!
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.Reason.SingleRecordTooBig">
            <summary>
            Status indicating that a Record was dropped because it is too big 
            (and it can't be accepted by Collector).
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.Reason.Unknown">
            <summary>
            Status indicating that Records were probably dropped because 
            an exception has happened (please consult the trace log).
            This is likely to be a problem in the library (bug or regression).
            This exception might not be accurate in some cases, because we don't track
            every exact path of a data loss.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.DroppingReason">
            <summary>
            Enumeration of dropped Records.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.DatapackageIdentifier">
            <summary>
            The datapackage identifier that was generated.
            </summary>
            <returns>the datapackage identifier, or NULL in case there wasn't a datapackage available</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.PackageSendFailedArgs">
            <summary>
            Arguments for the event when records package send failed.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.PackageSendFailedArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.AggregateException,System.String)">
            <summary>
            Constructs the class instance basing on provided <paramref name="records"/> 
            and <paramref name="exceptions"/>
            </summary>
            <param name="records">records which sending failed</param>
            <param name="exceptions">
            aggregation of all exceptions faced during all attempts to send the records
            </param>
            <param name="datapackageIdentifier">the identifier of the datapackage that failed sending</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageSendFailedArgs.Exceptions">
            <summary>
            Aggregation of all exceptions (from all retries) which caused the records package send to fail.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageSendFailedArgs.DatapackageIdentifier">
            <summary>
            The datapackage identifier that was generated.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.PackageSendingArgs">
            <summary>
            Arguments for the event when a records package is about to be sent.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.PackageSendingArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)">
            <summary>
            Constructs the class instance basing on provided <paramref name="records"/>.
            </summary>
            <param name="records">records which the library is about to send</param>
            <param name="datapackageIdentifier">the identifier of the datapackage is currently sending</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageSendingArgs.DatapackageIdentifier">
            <summary>
            The datapackage identifier that was generated.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.PackageSendRetryingArgs">
            <summary>
            Arguments for the event when a records package send is being retried.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.PackageSendRetryingArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.Exception,System.String)">
            <summary>
            Constructs the class instance basing on provided <paramref name="records"/> and <paramref name="lastException"/>
            </summary>
            <param name="records">records to retry</param>
            <param name="lastException">exception from the previous attempt</param>
            <param name="datapackageIdentifier">the identifier of the datapackage is currently retrying the sending</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageSendRetryingArgs.LastException">
            <summary>
            The last Exception (from most recent attempt) that caused the records package send to fail.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageSendRetryingArgs.DatapackageIdentifier">
            <summary>
            The datapackage identifier that was generated.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.PackageSentArgs">
            <summary>
            Arguments for the event when a records package send succeeded.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.PackageSentArgs.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.Int32,System.String)">
            <summary>
            Constructs the class instance basing on <paramref name="records"/> and <paramref name="numberOfRetries"/>
            </summary>
            <param name="records">records which has been just sent</param>
            <param name="numberOfRetries">total number of retries required to succeed</param>
            <param name="datapackageIdentifier">the identifier of the datapackage that was sent</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.PackageSentArgs.NumRetries">
            <summary>
            Return number of retries required to successful sending of this record package.
            </summary>
            <returns>total number of retries required to successful sending of this record package</returns>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Events.PackageSentArgs.DatapackageIdentifier">
            <summary>
            The datapackage identifier that was generated.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents">
            <summary>
            <para>
            Defines events which can be generated by <see cref="T:Microsoft.Applications.Telemetry.TelemetryManager"/>.
            One can register its own callbacks to be notified about the events.
            </para>
            <para>
            Please note that the events can be called from more than one thread,
            so please take extra care and guarantee that the events handlers are
            thread-safe.
            </para>
            <para>
            Each event is fired in context of package of records. Please note that the package
            content has (almost) noting in common with set of records passed to <c>SendRecord()</c> method.
            Records visible in the events are usually "a batch" - unit of sending records to
            the Collectors. Please don't assume anything about order of appearing of records
            in the notifications (when compared to order of adding them by call to <c>SendRecord()</c>).
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendFailedHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendFailed"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageDroppedHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageDropped"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendRetryingHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendRetrying"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendingHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSending"/>event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSentHandler">
            <summary>
            Handler for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSent"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The args.</param>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendFailed">
            <summary>
            <para>
            Occurs when all retries (according to retry policy) have been exhausted and a record package
            is permanently abandoned. 
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageDropped">
            <summary>
            <para>
            Occurs when a record package is dropped (without attempting to send) due to:
            <list type="bullet">
            <item><term>memory limit</term> <description>e.g. in a situation that due to network problems large number of Records
            accumulated inside the library). The memory limit can be configured via RecordsKeptInMemoryLimit
            TelemetryManagerSettings property.</description></item>
            <item><term>too big Record</term> <description> the Collector accepts requests which size is not bigger than
            TelemetryManagerSettings.CollectorRequestSizeLimitBytes, so each Record has to be smaller
            than this limit.</description></item>
            <item><term>unknown</term> <description>this can only happen in cases we can't give a specific reason of failure. 
            Usually it was triggered by an unexpected exception, so the best source to look for the root cause is the trace log.
            </description></item>
            </list>
            </para>
            <para>
            Please note that this event is not necessarily a reliable source to determine why a record hasn't reached the collector. 
            On rare occasions it can be possible for a record to slip through, although we think it was dropped.
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendRetrying">
            <summary>
            <para>
            Occurs when a record package sending attempt failed and according to retry policy
            next attempt should be made.
            </para>
            <para>
            The event is called before sleep related to backoff. 
            The event is not called after failed attempt which is the last one.
            PackageSendFailed is called instead.
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSending">
            <summary>
            <para>
            Occurs when first attempt to a record package sending is about to happen.
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSent">
            <summary>
            <para>
            Occurs when a record package has been sent successfully.
            </para>
            <para>
            Can be called (possibly) many times in parallel, please assure that provided handler is thread-safe.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.#ctor(Microsoft.Applications.Telemetry.Events.TelemetryEvents)">
            <summary>
            Construtor used when it is required to also call the
            <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryEvents"/>.
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.TriggerPackageSendFailed(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.AggregateException,System.String,System.String,Microsoft.Applications.Telemetry.Events.EventsDroppedArgs.EventsDroppedReason)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendFailed"/> event.
            Uses the tenantToken to check whether the package was being sent to AST Kpi tenants. If yes,
            then excludes those packages from raising the event.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.TriggerPackageDropped(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.RecordWithMetadata},Microsoft.Applications.Telemetry.Events.PackageDroppedArgs.Reason,System.String)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageDropped"/> event.
            Uses records with metadata to remove the records that are being set to the AST Kpi tenants. Raises the event
            with the remaining records.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.TriggerPackageSendRetrying(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.Exception,System.String,System.String,Microsoft.Applications.Telemetry.Events.EventsRetryingArgs.EventsRetryReason)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSendRetrying"/> event.
            Uses the tenantToken to check whether the package was being sent to AST Kpi tenants. If yes,
            then excludes those packages from raising the event.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.TriggerPackageSending(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String,System.String)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSending"/> event.
            Uses the tenantToken to check whether the package was being sent to AST Kpi tenants. If yes,
            then excludes those packages from raising the event.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.TriggerPackageSent(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.Int32,System.String,System.String)">
            <summary>
            Triggers <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageSent"/> event.
            Uses the tenantToken to check whether the package was being sent to AST Kpi tenants. If yes,
            then excludes those packages from raising the event.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.KillSwitchManager">
            <summary>
            Class that manages which tokens are to be killed based on the response returned by the collector.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.KillSwitchManager.SetKillSwitchTenants(System.Net.Http.HttpResponseMessage)">
            <summary>
            Parses the response message returned by the collector to set the kill tokens and their duration.
            </summary>
            <param name="responseMessage"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.KillSwitchManager.IsTenantKilled(System.String)">
            <summary>
            Checks to see if a tenant token has been killed by the collector
            </summary>
            <param name="tenantToken"></param>
            <returns>Returns true if the tenant token is marked to be killed by the collector. False otherwise</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.ActionModel.Action.#ctor(System.String,System.String,System.Guid,Microsoft.Applications.Telemetry.ILogger)">
            <summary>
            Action's constructor. 
            </summary>
            <param name="actionName">The name of the Action, it's a required field.</param>
            <param name="actionClass">The class is an enum defined in the ActionEventType.cs class.</param>
            <param name="actionId">The Guid of the action, if it's default("00000000-0000-0000-0000-000000000000" in this case), a new guid will be assigned, otherwise the passed-in value will be used.</param>
            <param name="logger">The customized logger</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.ActionModel.Action.End(Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            private End method will reset the Guid to default value.
            </summary>
            <param name="properties">The extra properties passe-in</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.ActionModel.Action.Dispose">
            <summary>
            Releases all resources used by the object. Disposing ends the action by calling the End() method
            If End has already been called Dispose doesn't do anything.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.ActionModel.Action.Finalize">
            <summary>
            Action destructor.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.ActionModel.Action.Begin(System.String,System.String,System.Guid,Microsoft.Applications.Telemetry.ILogger,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Action factory, it will return an Action instance.
            </summary>
            <param name="actionName">The name of the Action, it's a required field.</param>
            <param name="actionClass">The class is an enum defined in the ActionEventType.cs class.</param>
            <param name="actionId">The Guid of the action, if it's default("00000000-0000-0000-0000-000000000000" in this case), a new guid will be assigned, otherwise the passed-in value will be used.</param>
            <param name="logger">The customized logger</param>
            <param name="properties">The extra properties passe-in</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.ActionModel.Action.End(Microsoft.Applications.Telemetry.Models.ActionModel.Action,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            public static End method will end the action.
            </summary>
            <param name="action">The existing action instance to be ended</param>
            <param name="properties">The extra properties passe-in</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Models.SystemListener">
            <summary>
            <para>
            This class contains a set of functions and properties for pushing System related events to the telemetry pipeline.
            System related events Performance Counters, Event Logs and Unhandled exceptions. The functions and properties in this class are higher level 
            abstractions for ease of use. They internally use the publicly available methods on <see cref="T:Microsoft.Applications.Telemetry.ILogger" />. 
            </para>
            <para>
            Note: This class is not thread-safe. Callers must manage access to this class.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SystemListener.#ctor(Microsoft.Applications.Telemetry.ILogger)">
            <summary>
            Creates a new instance of SystemListener class which is used to send performance counters, event log entries and 
            unhandled exceptions to ARIA.
            </summary>
            <param name="logger">The logger that should be used to send events generated. If not specified then the default logger will be used.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SystemListener.MonitorEventLog(System.String,System.Collections.Generic.IEnumerable{System.Diagnostics.EventLogEntryType})">
            <summary>
            Tracks event log entries to the specified event log source and sends them as failure events to ARIA.
            Initialization with an eventLogSource requires administrative privileges.
            </summary>
            <param name="eventLogSource">
            Source for the event log that should be monitored to send Failure events.
            </param>
            <param name="eventLogEntryTypesToSend">A list that specifies the event log entry types that we send to ARIA. By default we send errors and failure audits.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SystemListener.MonitorUnhandledExceptions">
            <summary>
            Tracks unhandled exceptions and send them as failure events to ARIA. The undhandled exception will be sent before the service
            crashes.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SystemListener.MonitorPerfCounters(System.Collections.Generic.List{System.String},System.Nullable{System.TimeSpan})">
            <summary>
            Used to send a sampled metric event per counter for given list of performance counters at regular intervals. 
            </summary>
            <param name="perfCounters">
             A list of names of the performance counters to be sent. The names may be formatted in one of two ways:
             "\\Category\\Counter name"
             "\\Category(Instance)\\Counter name"
             Spaces are permitted. Instance may be *, the wildcard symbol, indicating that <see cref="T:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler" /> is to
             collect all instances of that counter.
            </param>
            <param name="cadence">The frequency at which the values of the performance counters should be sent to the collector.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SystemListener.Dispose">
            <summary>
            Releases all resources used by the object. Before disposing waits until all added failure events (created from either
            unhandled exception or event log entries) are queued to be sent to ARIA (or dropped in case of network problems or if Log Manager has been disposed).
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Models.AggregatedMetric">
            <summary>
            A metric to aggregate statistics.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.AggregatedMetric.#ctor(System.String,System.String,Microsoft.Applications.Telemetry.ILogger)">
            <summary>
            <para>
            Creates an aggregated metric object to send aggregated statistics as an AggregatedMetric event at the defined cadence for all metrics.
            The class will aggregate all values pushed within the defined cadence to create the aggregated statistics. After sending the AggregatedMetric event
            aggregation will be reset and start from scratch.
            </para>
            <para>
            Registers the metric with the logger provided. Metrics with same name and instance can't be registered with the same logger.
            If no value is set in the current interval then the value from the previous interval will be sent.
            Note: Metrics will only be sent after LogManager has been initialized.
            </para>
            </summary>
            <param name="metricName">Name of the aggregated metric.</param>
            <param name="instanceName">String indicating the instance of the metric</param>
            <param name="logger">The logger that should be used to send events generated. If not specified then the default logger will be used.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.AggregatedMetric.PushMetric(System.Double)">
            <summary>
            Pushes the value specified to be added for aggregation.
            </summary> 
            <param name="value">Value to be aggregated.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.AggregatedMetric.Dispose">
            <summary>
            Releases all resources used by the object. Unregisters this aggregated metric from its logger.
            After disposing, a new aggregated metric with the same name as this metric can be registered with this metrics logger.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Models.Operation">
            <summary>
            A tracker which tracks individual operation and optionally detailed status
            Suppports nested operations
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.Operation.#ctor(System.String,System.Boolean,System.String,System.String,System.String,Microsoft.Applications.Telemetry.EventProperties,Microsoft.Applications.Telemetry.ILogger)">
            <summary>
            Create an operation with specified name. 
            If enableMetrics is set to true an aggregated metric event for the operation will be sent at the defined metric cadence. Statistics like average duration, total operation count, 
            failure count, etc. will be sent as part of the aggregated metric event. If false then we will send an operation event at the completion of the operation.
            Operation will use the OperationContext to create the correlation info if provided otherwise it will use Trace.CorrelationManager by default.
            </summary>
            <param name="operationName">String indicating the name of the operation.</param>
            <param name="enableMetrics">Set to true if Aggregated Statistics about the operation should be sent at the duration defined by LogConfiguration.MetricCadence.</param>
            <param name="instanceName">String indicating the instance of the operation.</param>
            <param name="objectClass">String indicating the object class on which the operation is being performed Example: Component.</param>
            <param name="objectId">String indicating the object identifier on which the operation is being performed Example: RecordBatcher.</param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
            <param name="logger">The logger that should be used to send events generated. If not specified then the default logger will be used.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.Operation.Begin">
            <summary>
            Start the operation
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.Operation.End(Microsoft.Applications.Telemetry.ResultType)">
            <summary>
            End the operation and report a status. Send the operation.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.Operation.Dispose">
            <summary>
            Releases all resources used by the object. Disposing ends the operation with the result being Unknown if End has not been called already.
            If End has already been called Dispose is no operation.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Models.SampledMetric">
            <summary>
            A simple counter to count things. Substitute for performance counters.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Models.SampledMetric.Value">
            <summary>
            Gets the current value of the sampled metric. Used for testing.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Models.SampledMetric.HasSamples">
            <summary>
            Tracks if there any samples.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SampledMetric.#ctor(System.String,System.String,System.Nullable{System.Double},Microsoft.Applications.Telemetry.ILogger)">
            <summary>
            <para>
            Creates a sampled metric object to send a value as a SampledMetric event at the defined cadence for all metrics.
            </para>
            <para>
            Registers the metric with the logger provided. Metrics with same name and instance can't be registered with the same logger.
            If no value is set in the current interval then the value from the previous interval will be sent.
            Note: Metrics will only be sent after LogManager has been initialized.
            </para>
            </summary>
            <param name="metricName">Name of the sampled metric.</param>
            <param name="instanceName">String indicating the instance of the metric</param>
            <param name="initialValue">Initial value of the metric.</param>
            <param name="logger">The logger that should be used to send events generated. If not specified then the default logger will be used.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SampledMetric.PushMetric(System.Double)">
            <summary>
            Sets the sampled metric to the value specified.
            </summary> 
            <param name="value">Value of the sampled metric.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Models.SampledMetric.Dispose">
            <summary>
            Releases all resources used by the object. Unregisters this sampled metric from its logger.
            After disposing, a new sampled metric with the same name as this metric can be registered with this metrics logger.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ActionEventType">
            <summary>
            Action Event Type Enum
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionEventType.Undefined">
            <summary>
            Default value if event type is not specified.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionEventType.Start">
            <summary>
            A new action is created without specifying an action Id and an action Id will be created during the start.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionEventType.End">
            <summary>
            The existing action is ended. The created action Id will be reset to null in the thread.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionEventType.PassiveStart">
            <summary>
            A new action instance is created by inheriting an existing action Id from other threads/context. This is particularly used to replay the action id between different threads or client-server scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionEventType.PassiveEnd">
            <summary>
            The existing action is ended. The inherited action Id will be reset in the thread.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.ActionEventType.NestedStart">
            <summary>
            Tried to created a new action while there is an existing one in the same thread/context. In this case, the start call won't create a new action id to override the existing action Id. Rather it fails silently but with logging it as an event. Note in this case, the END call on this action instance does not actually log an ?end? event.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Patterns.Listeners.UnhandledExceptionListener">
            <summary>
            Forwards unhandled exceptions to the Aria platform.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.UnhandledExceptionListener.#ctor(Microsoft.Applications.Telemetry.ILogger)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:Microsoft.Applications.Telemetry.Patterns.Listeners.UnhandledExceptionListener" /> class. 
            </para>
            </summary>
            <param name="logger">The logger that should be used to send events generated.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.UnhandledExceptionListener.FlushAndDispose">
            <summary>
            <para>
            Synchronously wait until all failure events added by the UnhandledExceptionListener are forwarded to the Telemetry Manager.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Patterns.Listeners.EventLogListener">
            <summary>
            Forwards event log entries to the Aria platform.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.EventLogListener.#ctor(System.String,Microsoft.Applications.Telemetry.ILogger,System.Collections.Generic.IEnumerable{System.Diagnostics.EventLogEntryType})">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:Microsoft.Applications.Telemetry.Patterns.Listeners.EventLogListener" /> class. 
            Initializing the <see cref="T:Microsoft.Applications.Telemetry.Patterns.Listeners.EventLogListener" /> class with an eventLogSource requires administrative privileges.
            </para>
            </summary>
            <param name="eventLogSource">Source for the event log that should be monitored to send Failure events.</param>
            <param name="logger">The logger that should be used to send events generated.</param>
            <param name="eventLogEntryTypesToSend">A list that specifies the event log entry types that we send to ARIA. By default we send errors and failure audits.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.EventLogListener.FlushAndDispose">
            <summary>
            <para>
            Synchronously wait until all failure events added by the EventLogListener are forwarded to the Telemetry Manager.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler">
            <summary>
            This class is used by telemetry managers to schedule records containing performance counters at a regular rate.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.#ctor(Microsoft.Applications.Telemetry.ILogger,System.Collections.Generic.List{System.String})">
            <summary>
            Creates an instance of the PerfCounterScheduler class which is used to send perf counters to ARIA.
            </summary>
            <param name="logger">The logger that should be used to send events generated.</param>
            <param name="perfCounters">A list of string names of the performance counters to be sent.
            These names must either be of the form "\Category(Instance)\Counter name" with a non-blank Instance,
            or of the form "\Category\Counter name". If it is not, errors will likely occur.
            If a performance counter instance is given as "*", it will be split into one performance counter for each 
            instance for that category and counter name.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.SchedulePerfCounters(System.Collections.Generic.List{System.String})">
            <summary>
            Sends the values of each performance counter to the collector at some interval and may be
            </summary>
            <param name="perfCounters">A list of string names of the performance counters to be sent.
            These names must either be of the form "\Category(Instance)\Counter name" with a non-blank Instance,
            or of the form "\Category\Counter name". If it is not, errors will likely occur.
            If a performance counter instance is given as "*", it will be split into one performance counter for each 
            instance for that category and counter name.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.CounterIsScheduled(System.String)">
            <summary>
            Returns whether a given performance counter is currently scheduled to be sent.
            </summary>
            <param name="perfCounter">The performance counter, as a string. Instance cannot be a wildcard.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.RelaxCadenceLimitsForTest">
            <summary>
            This method lets PerfCounterScheduler work even with cadences faster than the fastest that would normally be allowed.
            Use this only for testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.EnforceCadenceLimits">
            <summary>
            Undoes the effects of AllowFastCadenceForTest by requiring PerfCounterScheduler to once again check cadence bounds.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.ParsedCounter">
            <summary>
            Used for storing the components of a performance counter's string name after it's been parsed.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.ParsedCounter.#ctor(System.String)">
            <summary>
            Parses a string performance counter name that contains an instance.
            </summary>
            <param name="counter">A string of the form "\Category(Instance)\Counter name" or
            "\Category\Counter name".</param>
            <returns>This returns the input string parsed into its constituent components, and stored
            into a ParsedCounter struct</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Patterns.Listeners.PerfCounterScheduler.ParsedCounter.HasInstance(System.String)">
            <summary>
            Checks if a counter name specifies an instance for that counter.
            </summary>
            <param name="counter">This string must either be of the form "\Category(Instance)\Counter name" with a non-blank Instance,
            or of the form"\Category\Counter name". If it is not, errors will likely occur.</param>
            <returns>This will return True if the counter name specifies an instance, and False otherwise.</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Metrics.Core.AggregatedMetricMerger">
            <summary>
            It merges <see cref="T:Microsoft.Applications.Telemetry.Metrics.Core.AggregatedStatistics"/> for a metric over time, so that we output data less often without losing anything.
            
            The class is thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Metrics.Core.AggregatedStatistics.IsDefaultHistogram">
            <summary>
            Check if the histogram in this instance is the default one.
            Usually this means that a user was not interested in having a histogram, so real boundaries were not specified.
            </summary>
            <returns>true if the histogram is default one</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Metrics.Core.DataStatistics">
            <summary>
            Simple statistics for series of data. It has constant memory footprint. It is not thread-safe!
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Metrics.Core.EnumHelper">
            <summary>
            Helpers to work with Enums.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Metrics.Core.EnumHelper.GetAllValues``1">
            <summary>Syntactic sugar.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Applications.Telemetry.Metrics.Core.FixedBoundaryHistogram.#ctor(System.Int64[])" -->
        <member name="M:Microsoft.Applications.Telemetry.Metrics.Core.FixedBoundaryHistogram.AddValue(System.Int64,System.Int32)">
            <summary>
            Adds value to histgoram 'count' times. This is not thread-safe. 
            </summary>
            <param name="value"></param>
            <param name="count"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Metrics.Core.FixedBoundaryHistogram.GetCountsInEachBucket">
            <summary>
            Returns count of items in each bucket, in sorted bucket order. This is not thread-safe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Metrics.Core.FixedBoundaryHistogram.Clear">
            <summary>
            Sets count for each bucket in histogram to 0. This is not thread-safe.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Metrics.Core.IAggregatedMetricEmitter">
            <summary>
            Emits metrics in aggregated form.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Metrics.Core.IMetricsAggregator`1.PushMetric(`0,System.Int64)">
            <summary>
            For given metric <paramref name="id"/> report value associated with it (e.g. number of processed items, number of downloaded bytes).
            It should be thread-safe.
            </summary>
            <param name="id">id defining the metric</param>
            <param name="value">value related to this metric e.g. processed items, number of bytes, etc.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Metrics.Core.IMetricOptionsDb.GetOptions(System.String)">
            <summary>
            Retrieve options for given metric.
            
            If given metric doesn't have it's own options - default should be returned.
            </summary>
            <param name="metricName">Metric to get options to</param>
            <returns><see cref="T:Microsoft.Applications.Telemetry.Metrics.Core.MetricOptions"/> associated with given metric</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Metrics.BaseCounter">
            <summary>
            Base class for counters
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Metrics.OperationMetric">
            <summary>
            A Metric which tracks success/failure of operations and the time they took to run.
            The metric data is intended to be used in aggregate. 
            Nested operations are not supported.
            </summary>
            TODO(abpanwar): If aggergated metric class is unsealed then we should consider OperationMetric inheriting it.
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ILogger">
            <summary>
            ILogger contains methods to log custom events, and semantic APIs to log software events. Common fields are automatically included with all events. 
            All methods can be extended with custom key-value properties for additional application specific data, including PII.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogEvent(Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Log a custom event, including common fields and custom key-value properties.
            </summary>
            <param name="properties"> Custom event properties, including the event name and custom key value properties.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogFailure(System.String,System.String,System.String,System.String,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs an application defined failure event, including common fields, and custom key-value properties.
            </summary>
            <param name="signature">A detailed string which uniquely identifies the bucket of the failure.</param>
            <param name="detail">Detailed error for the failure.</param>
            <param name="category">Indicates the type of failure. Implementation specific.</param>
            <param name="id">A string which uniquely identifies the failure.  Other data structures (for example Dumps), can reference this failure by Id.</param>
            <param name="properties">Additional event properties to be sent with the event.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogTrace(Microsoft.Applications.Telemetry.TraceLevel,System.String,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a diagnostic trace event, including common fields and custom key-value properties.
            </summary>
            <param name="level">The level of trace message.</param>
            <param name="message">Message logged as part of the trace message. Implementation specific.</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogState(System.String,System.String,System.String,System.String,System.Nullable{System.Int64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a state event capturing the current state of an object, including common fields and custom key value properties.
            </summary>
            <param name="name">The name of the state being reported.</param>
            <param name="value">The value of the state that is being reported. This is the new state of the object if this is a state transition.</param>
            <param name="objectClass">The class of object which is being tracked.</param>
            <param name="objectId">An identifier for the object being tracked.</param>
            <param name="timeToLive">Duration in microseconds for which the state being reported is valid for.</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogStateTransition(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a state transition event for an object, including common fields and custom key-value properties.
            </summary>
            <param name="name">The name of the state being reported.</param>
            <param name="value">The value of the state that is being reported. This is the new state of the object if this is a state transition.</param>
            <param name="transitionSignature">A unique string identifying the reason for the state change. Used for bucketing.</param>
            <param name="transitionDetail">A string identifying details of the state being reported.</param>
            <param name="objectClass">The class of object which is being tracked.</param>
            <param name="objectId">An identifier for the object being tracked.</param>
            <param name="timeToLive">Duration in microseconds for which the state being reported is valid for.</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogSampledMetric(System.String,System.Double,System.String,System.String,System.String,System.String,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs the sampled value of an observation at a point of time, including common fields and custom key-value properties.
            </summary>
            <param name="name">The name of the metric. Often a performance counter name.</param>
            <param name="value">Observed value of the metric.</param>       
            <param name="units">Units for the observed value.</param>
            <param name="instanceName">Instance of the metric, often used to indicate a performance counter instance.</param>
            <param name="objectClass">The object class the metric is tracking.</param>
            <param name="objectId">The object ID for what the metric is tracking.</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogAggregatedMetric(Microsoft.Applications.Telemetry.AggregatedMetricData,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs an aggregated metric representing a summary of a number of observations over a period of time. Includes common fields and custom key-value properties.
            </summary>
            <param name="metricData">Information about the aggregated metric</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogOperation(Microsoft.Applications.Telemetry.OperationData,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs an operation event representing a single operation at the point of completion. Includes common fields and custom key-value properties.
            </summary>
            <param name="operationData">Information about the operation </param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogBlobMetadata(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.UInt64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a blob metadata, representing a diagnostic blob such as a trace log or a configuration file captured on client. 
            </summary>
            <param name="id">A string which uniquely identifies the blob for which diagnostic information is being provided.</param>
            <param name="category">Indicates the type of blob.</param>
            <param name="uri">Unique fully qualified URI indicating the location of blob, whether local or in the cloud.</param>
            <param name="description">End user specified description of the blob.</param>
            <param name="startTime">Start of interval blob diagnoses.</param>
            <param name="endTime">End of interval blob diagnoses.</param>
            <param name="blobSize">Size of blob in bytes.</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogAlert(System.UInt32,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a single alert event, containing information about an alert generated for a system. Includes common fields and custom key-value properties.
            </summary>
            <param name="severity">The severity of the alert, with 0 being the most severe.</param>
            <param name="signature">A unique signature for the alert, used for bucketing.</param>
            <param name="category">What type of alert is happening. Implementation specific.</param>
            <param name="detail">Verbose description of the alert.</param>
            <param name="policyId">What policy has generated the alert/</param>
            <param name="objectClass">The class of the object the alert is for.</param>
            <param name="objectId">An ID for the object the alert is for.</param>
            <param name="nextAlertTime">The delay before reissuing an alert.</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogHealthState(System.String,Microsoft.Applications.Telemetry.HealthColor,System.Nullable{System.UInt32},Microsoft.Applications.Telemetry.HealthDimensionType,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs an event measuring the health state of a system. Includes common fields and custom key-value properties.
            </summary>
            <param name="name">The health state being monitored.</param>
            <param name="value">The current health color, given as green, yellow, or red.</param>
            <param name="score">Raw health score, unsigned.</param>
            <param name="dimension">What aspect of system health is being measured.</param>
            <param name="policyId">Identifies the health model policy that generated the health state.</param>
            <param name="objectClass">The class of the object the health of which is being reported.</param>
            <param name="objectId">A unique ID for the monitored object.</param>
            <param name="transitionSignature">A signature that represents the reason for a change in Score/HealthColor. 
            Can be used for bucketing by health monitoring systems
            When HealthColor changes from Green to Red, you could include a signature that identifies the reason behind the change.
            </param>
            <param name="isCritical">
            Identifies whether the Health of the object that is currently being logged is critical to the health of a parent object.
            This is useful in automatically doing roll ups and aggregating Health State from child objects.
            </param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.LogAction(Microsoft.Applications.Telemetry.Models.ActionModel.Action,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs an event only when the action is created or ended.
            </summary>
            <param name="actionInstance">Instance of an existing action</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.SetContext(System.String,System.String,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named property that should be sent with every event.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.SetContext(System.String,System.Int64,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named property that should be sent with every event.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.SetContext(System.String,System.Double,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named property that should be sent with every event.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.SetContext(System.String,System.Boolean,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named property that should be sent with every event.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.SetContext(System.String,System.DateTime,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named property that should be sent with every event.
            
            If piiKind is set, we will use the UTC Ticks as the raw content.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.SetContext(System.String,System.Guid,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named property that should be sent with every event.
            
            If piiKind is set, we will use the GUID string as the raw content.
            </summary>
            <param name="key">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ILogger.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add a dictionary of properties that should be sent with every event.
            </summary>
            <param name="properties">A set of key, value properties to add.</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.ILogger.SemanticContext">
            <summary>
            Gets the logger specific SemanticContext.
            Used to populate common fields that are sent with every event.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.InternalLogger">
            <summary>
            Internal class that implements the ILogger interface.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.InternalLogger.Settings">
            <summary>
            This is called by the log manager to set the TelemetryManagerSettings in all the loggers that were created before the logmanager was initialized.
            </summary>
        </member>
        <member name="E:Microsoft.Applications.Telemetry.InternalLogger.SampledMetricEventRecordCreated">
            <summary>
            An event raised every time a sampled event record is created to be sent.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.#ctor(Microsoft.Applications.Telemetry.IRecordSink,Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings,System.String,System.String)">
            <summary>
            <para>
            Creates new instance of <see cref="T:Microsoft.Applications.Telemetry.InternalLogger"/> basing on 
            <paramref name="settings"/>.
            </para>
            </summary>
            <param name="source">The name of an optional component in your application that can be used to group associated telemetry events.</param>
            <param name="sink"></param>
            <param name="settings">TelemetryManagerSettings object which contains the common field values in its Identifiers dictionary.</param>
            <param name="tenantToken">The token for your tenant.</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.InternalLogger.SemanticContext">
            <summary>
            Local semantic context.
            SemanticContext is used to populate common info fields that are sent with every event.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogEvent(Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Log a basic event.
            </summary>
            <param name="properties">A map from property names to items containing the property information. Also specifies the event name.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogOperation(Microsoft.Applications.Telemetry.OperationData,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Log an operation event
            </summary>
            <param name="operation"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogFailure(System.String,System.String,System.String,System.String,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a failure event.        
            </summary>
            <param name="signature">A detailed string which uniquely identifies the bucket of the failure.</param>
            <param name="detail">Detailed error for the failure.</param>
            <param name="category">Indicates the category of failure. Implementation specific.</param>
            <param name="id">A string which uniquely identifies the failure.  Other data structures (for example Dumps), can reference this failure by Id.</param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogTrace(Microsoft.Applications.Telemetry.TraceLevel,System.String,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a trace event.
            </summary>
            <param name="level">The level of trace message.</param>
            <param name="message">Message logged as part of the trace message. Implementation specific.</param>
            <param name="properties">A map from property names to items containing information for additional properties.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogSampledMetric(System.String,System.Double,System.String,System.String,System.String,System.String,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a sampled metric.
            </summary>
            <param name="name">The name of the metric. Often a performance counter name.</param>
            <param name="value">Observed value of the metric.</param>
            <param name="units">Units for the observed value.</param>
            <param name="instanceName">Instance of the metric, often used to indicate a performance counter instance.</param>
            <param name="objectClass">The object class the metric is tracking.</param>
            <param name="objectId">The object ID for what the metric is tracking.</param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogState(System.String,System.String,System.String,System.String,System.Nullable{System.Int64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a state event.
            </summary>
            <param name="name">The name of the state being reported.</param>
            <param name="value">The value of the state that is being reported. This is the new state of the object if this is a state transition.</param>
            <param name="objectClass">The class of object which is being tracked.</param>
            <param name="objectId">An identifier for the object being tracked.</param>
            <param name="timeToLive">Duration in microseconds for which the state being reported is valid for.</param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogStateTransition(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a state transition event.
            </summary>
            <param name="name">The name of the state being reported.</param>
            <param name="value">The value of the state that is being reported. This is the new state of the object if this is a state transition.</param>
            <param name="objectClass">The class of object which is being tracked.</param>
            <param name="objectId">An identifier for the object being tracked.</param>
            <param name="transitionSignature">A unique string identifying the reason for the state change. Used for bucketing.</param>
            <param name="transitionDetail">A string identifying details of the state being reported.</param>
            <param name="timeToLive">Duration in microseconds for which the state being reported is valid for.</param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogAlert(System.UInt32,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs a single alert event.
            </summary>
            <param name="severity">The severity of the alert, with 0 being the most severe.</param>
            <param name="signature">A unique signature for the alert, used for bucketing.</param>
            <param name="objectClass">The class of the object the alert is for.</param>
            <param name="objectId">An ID for the object the alert is for.</param>
            <param name="category">Indicates the category of the alert.</param>
            <param name="detail">Verbose description of the alert.</param>
            <param name="policyId">What policy has generated the alert/</param>
            <param name="nextAlertTime">The delay before reissuing an alert.</param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogHealthState(System.String,Microsoft.Applications.Telemetry.HealthColor,System.Nullable{System.UInt32},Microsoft.Applications.Telemetry.HealthDimensionType,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs an event measuring the health state of a system.
            </summary>
            <param name="name">The health state being monitored.</param>
            <param name="color">The current health color, given as green, yellow, or red.</param>
            <param name="objectClass">The class of the object the health of which is being reported.</param>
            <param name="objectId">A unique ID for the monitored object.</param>
            <param name="score">Raw health score, unsigned.</param>
            <param name="dimension">What aspect of system health is being measured.</param>
            <param name="policyId">Identifies the health model policy that generated the health state.</param>
            <param name="transitionSignature">A signature that represents the reason for a change in Score/HealthColor. 
            Can be used for bucketing by health monitoring systems.
            When HealthColor changes from Green to Red, you could include a signature that identifies the reason behind the change.
            </param>
            <param name="isCritical">
            Identifies whether the Health of the object that is currently being logged is critical to the health of a parent object.
            This is useful in automatically doing roll ups and aggregating Health State from child objects.
            </param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogBlobMetadata(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.UInt64},Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs blob metadata for diagnosis purposes.
            </summary>
            <param name="id">A string which uniquely identifies the blob for which diagnostic information is being provided.</param>
            <param name="category">Indicates the type of category.</param>
            <param name="uri">Unique fully qualified URI indicating the location of blob, whether local or in the cloud.</param>
            <param name="description">End user specified description of the blob.</param>
            <param name="startTime">Start of interval blob diagnoses.</param>
            <param name="endTime">End of interval blob diagnoses.</param>
            <param name="blobSize">Size of blob in bytes.</param>
            <param name="properties">Additional key-value pairs to bundle into the event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogAction(Microsoft.Applications.Telemetry.Models.ActionModel.Action,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Logs an event only when the action is created or ended.
            </summary>
            <param name="actionInstance">Instance of an existing action</param>
            <param name="properties">Additional event properties</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.SetContext(System.String,System.Boolean,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named long property that should be sent with every event.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.SetContext(System.String,System.DateTime,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named long property that should be sent with every event.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.SetContext(System.String,System.Guid,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named long property that should be sent with every event.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.SetContext(System.String,System.String,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named string property that should be sent with every event.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.SetContext(System.String,System.Int64,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named long property that should be sent with every event.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.SetContext(System.String,System.Double,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named double property that should be sent with every event.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Add a dictionary of properties that should be sent with every event.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.LogEventRecord(Microsoft.Applications.Telemetry.DataModels.Record,System.String)">
            <summary>
            This method is used to log an EventRecord object. This method should be called once the software/specific information has been populated in the EventRecord.
            The EventRecord object is converted to a Record object before being sent.
            </summary>
            <param name="eventRecord">The EventRecord object that needs to be sent.</param>
            <param name="tenantToken">The tenant token that should be used to send this event record.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.CreateEventRecord(System.String,Microsoft.Applications.Telemetry.EventProperties,Microsoft.Applications.Telemetry.CloudServiceData)">
            <summary>
            Creates an EventRecord object and populates it with the common fields.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="properties">A map from property names to items containing the property information</param>
            <param name="cloudServiceInfo">Cloud service info to be used for the current event record. It overrides the default value.</param>
            <returns>An EventRecord object</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogger.UpdateWithUserOverrides(Microsoft.Applications.Telemetry.DataModels.Record,Microsoft.Applications.Telemetry.EventProperties)">
            <summary>
            Updates the fields of the EventRecord with any overriden values specified by the user through the EventProperties extension point.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ISemanticContext">
            <summary>
            Interface for providing information to be sent with every event. 
            Provides methods to populate common info fields in event records.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ISemanticContext.SetCloudServiceInformation(Microsoft.Applications.Telemetry.CloudServiceData)">
            <summary>
            Specify information about the cloud service. The information provided will be used to create CloudServiceInfo and will be sent with every event. 
            If not called then we will send events without CloudServiceInfo.
            </summary>
            <param name="cloudServiceData">Data to create CloudServiceInfo to be sent with every event.</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.ISemanticContext.CorrelationInfoContext">
            <summary>
            Gets and Sets the OperationContext for sending <see cref="M:Microsoft.Applications.Telemetry.ILogger.LogOperation(Microsoft.Applications.Telemetry.OperationData,Microsoft.Applications.Telemetry.EventProperties)"/> and <see cref="M:Microsoft.Applications.Telemetry.ILogger.LogTrace(Microsoft.Applications.Telemetry.TraceLevel,System.String,Microsoft.Applications.Telemetry.EventProperties)"/> events. 
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.OperationData">
            <summary>
            Provides required and optional fields for the LogOperation method.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.OperationData.#ctor(System.String,System.Int64,Microsoft.Applications.Telemetry.ResultType)">
            <summary>
            Constructor which accepts required fields
            </summary>
            <param name="name">Name of the operation</param>
            <param name="duration">Duration in microseconds</param>
            <param name="result"></param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.ObjectClass">
            <Summary>
            String indicating the object class on which the operation is being performed Example: Component [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.ObjectId">
            <Summary>
            Optional string indicating the object identifier on which the operation is being performed Example: RecordBatcher [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.Name">
            <Summary>
            String indicating the name of the operation Example: ConfigRequest [Required]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.ApiType">
            <Summary>
            Indicates if API is a ServiceAPI, or ServiceProxy. [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.Duration">
            <Summary>
            Time taken by the operation to execute in microseconds. The operation starts at EventInfo.Time - Duration. [Required]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.Result">
            <Summary>
            Indicates the result of the operation. Use ResultSignature/Detail to further qualify the result of the operation [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.ResultSignature">
            <Summary>
            Indicates the result of the operation. Use ResultSignature/Detail to further qualify the result of the operation [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.ResultDetail">
            <Summary>
            A string representing the result status of the operation. Used to bucket the operation result, shouldn't contain unique fields. [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.RetryAttempt">
            <Summary>
            A string representing the detailed status of the operation. Can contain unique fields such as user id and time stamp. Implementation specific [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.InputSize">
            <Summary>
            For an operation that can be retried, the attempt number of that retry operation. Example: 0 for the first attempt. [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.OutputSize">
            <Summary>
            The number of output bytes for the operation [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.OperationData.Uri">
            <Summary>
            Optional Uri for the operation. [Optional]
            </Summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.SemanticContext.CorrelationInfoContext">
            <summary>
            Gets and Sets the OperationContext for sending <see cref="M:Microsoft.Applications.Telemetry.ILogger.LogOperation(Microsoft.Applications.Telemetry.OperationData,Microsoft.Applications.Telemetry.EventProperties)"/> and <see cref="M:Microsoft.Applications.Telemetry.ILogger.LogTrace(Microsoft.Applications.Telemetry.TraceLevel,System.String,Microsoft.Applications.Telemetry.EventProperties)"/> events. 
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.SemanticContext.SetCloudServiceInformation(Microsoft.Applications.Telemetry.CloudServiceData)">
            <summary>
            Specify information about the cloud service. The information provided will be used to create CloudServiceInfo and will be sent with every event. 
            If not called then we will send events without CloudServiceInfo.
            </summary>
            <param name="cloudServiceData">Data to create CloudServiceInfo to be sent with every event.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.BehaviorAfterDispose">
            <summary>
            Defines the possible behaviors
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.BehaviorAfterDispose.SilentlyIgnoreExceptionsAfterDispose">
            <summary>
            After a the TelemetryManager is disposed, all subsequent requests to send Records and other TelemetryManager methods will be silently ignore.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.BehaviorAfterDispose.ThrowExceptionsAfterDispose">
            <summary>
            After a the TelemetryManager is disposed, any request to send Records and other TelemetryManager methods will throw an exception.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.BufferPooler`1">
            <summary>
            Simple implementation of generic pooled buffers supporting Take/Return of buffers. Doesn't have error checking
            against Returning a buffer twice, or returning a buffer of a different size, so use with care.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.BufferPooler`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="maxPoolSize"></param>
            <param name="enablePooling"></param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.BufferPooler`1.Available">
            <summary>
            Available number of buffers in the pool
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.BufferPooler`1.Total">
            <summary>
            Total number of buffers allocated by pooler
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.BufferPooler`1.TakeItem">
            <summary>
            Take an item from the pool. Allocate new item if needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.BufferPooler`1.TakePooledItem">
            <summary>
            Take an item from the pool. Allocate a new item if needed. Wrap item in disposable wrapper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.BufferPooler`1.ReturnPooledItem(Microsoft.Applications.Telemetry.BufferPool.PooledItem{`0})">
            <summary>
            Return an disposable item wrapper to the pool.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.BufferPooler`1.ReturnItem(`0)">
            <summary>
            Return an item to the pool.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.BufferPooler`1.Reset">
            <summary>
            Reset the pool, free pooled buffers.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.BufferPoolInstances">
            <summary>
            Singleton tracking buffer pools for various types
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.BufferPoolInstances.LargeBuffers">
            <summary>
            Singleton for large pooled byte arrays
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.BufferPoolInstances.Records">
            <summary>
            Singleton for Record object pool. Only TraceLog type records can
            be pooled because they are managed internally by AriaTraceListener
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.BufferPool.PooledItem`1">
            <summary>
            Thin disposable wrapper around pooled item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ICorrelationInfoContext">
            <summary>
            Interface providing data to create OperationTracker events.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.ICorrelationInfoContext.OperationId">
            <summary>
            An identifier for the current operation
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.ICorrelationInfoContext.ParentOperationId">
            <summary>
            An identifier for the parent operation of the current operation
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.ICorrelationInfoContext.TransactionId">
            <summary>
            An identifier for the transaction associated with the current operation.
            Transaction spans operation and machine boundaries
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ICorrelationInfoContext.StartOperation">
            <summary>
             Create an operation
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ICorrelationInfoContext.EndOperation">
            <summary>
             End an operation
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.AuthenticationConfiguration">
            <summary>
            The class represents settings which are used to authenticate data sent by the library.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AuthenticationConfiguration.DisableHmacAuthentication">
            <summary>
            This setting disables HMAC. We don't need HMAC as we use tenant tokens to authenticate the traffic.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AuthenticationConfiguration.TenantToken">
            <summary>
            This setting returns the tenant token for your team.
            DEVNOTE: For Multi-headed you could think of making this an IEnumerable or a dictionary and make it public. 
            SupportMultipleTenants must be true in that case
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AuthenticationConfiguration.AuthenticationSettings">
            <summary>
            <para>
            Settings responsible for authentication of data sent by this instance of the library.
            </para>
            <para>
            Validation: mustn't be null.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.MaxRecordNumToDequeueAtOneTimeByBatcher">
            <summary>
            <para>
            Define how many records are dequeued from the Batcher inbound queue at a time.
            Setting to low value might increase synchronization cost. Don't change unless
            you exactly know the consequences.
            </para>
            <para>
            Validation: must be between 1 and <c>int.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.MaxRecordsInBatch">
            <summary>
            <para>
            Defines how many records can be batched into single record package.
            </para>
            <para>
            Setting this value to too low could result in small record packages 
            and not optimal network usage. Setting this value to too high 
            could increasing latency (time between adding records 
            to the library and real sending them to the Collectors).
            </para>
            <para>
            This value could be exceeded when "greedy batching" 
            (see <see cref="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.BatchesNumWaitingForSendingToKeepBatching"/> for more details) 
            is active.
            </para>
            <para>
            Validation: must be between 1 and <c>int.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.DefaultBatchingWaitingThreshold">
            <summary>
            <para>
            Defines how long the library can keep batching since arrival
            of the first record in current batch. 
            </para>
            <para>
            Setting this value to too low could result in small record packages 
            and not optimal network usage. Setting this value to too high 
            could increasing latency (time between adding records 
            to the library and real sending them to the Collectors).
            </para>
            <para>
            This value could be exceeded when "greedy batching" 
            (see <see cref="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.BatchesNumWaitingForSendingToKeepBatching"/> for more details) 
            is active.
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.BatchingWaitingThresholdJitter">
            <summary>
            Random jitter applied to <see cref="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.DefaultBatchingWaitingThreshold"/>. 
            This makes difference in heavily multi-headed environments like e.g. OTEL.
            <para>
            Validation: must be null or between 0 and 0.9. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.BatchesNumWaitingForSendingToKeepBatching">
            <summary>
            <para>
            The property controls "greedy batching" optimization.
            If a number of batches ready to send is greater or equal to <c>value</c>
            then "greedy batching" becomes activated.
            </para>
            <para>"Greedy batching" means: keep batching even though either
            <see cref="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.MaxRecordsInBatch"/> or <see cref="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.DefaultBatchingWaitingThreshold"/> 
            limit is exceeded. This optimization maximizes record package size basing
            on assumption that there is no point in adding next record package to
            Senders' queue if there is sufficient amount of packages there.
            </para>
            <para>
            Please note that "greedy batching" honors <see cref="P:Microsoft.Applications.Telemetry.MemoryConfiguration.DataPackageSizeLimitBytes"/> limit.
            </para>
            <para>
            Set to very big value (e.g. to <see cref="P:Microsoft.Applications.Telemetry.MemoryConfiguration.RecordsKeptInMemoryLimit"/>) 
            to disable "greedy batching"
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.CollectorRequestSizeLimitBytes">
            <summary>
            <para>
            Value specified by Skype Data RV team. Should be kept in sync
            with maximal request size accepted by the Collectors.
            </para>
            <para>
            Validation: must be between 1 and <c>long.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para> 
            <remarks>
            Don't change this unless you really know what you do!
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.SingleWaitingOnDequeueDurationWhenBatching">
            <summary>
            <para>
            Maximal sleeping time when getting a record from batcher inbound queue. 
            This setting is very internal and shouldn't be modified.
            Too large value can increase records processing latency.
            Too small value can increase CPU consumption.
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.LogConfiguration">
            <summary>
            Manage the various configurations for the telemetry library.
            Once the telemetry library is initialized using a LogManager, the configuration is 
            immutable. Any subsequent changes to the LogConfiguration will be a NO OP
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.LogConfiguration.CollectorUrlUnitedStates">
            <summary>
            Address of the Collectors in United States.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.LogConfiguration.CollectorUrlGermany">
            <summary>
            Address of the Collectors in Germany.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.LogConfiguration.CollectorUrlAustralia">
            <summary>
            Address of the Collectors in Australia.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.LogConfiguration.CollectorUrlJapan">
            <summary>
            Address of the Collectors in Japan.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.LogConfiguration.CollectorUrlEurope">
            <summary>
            Address of the Collectors in Europe.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.LogConfiguration.DefaultCollectorUrlInIntegration">
            <summary>
            Address of the Collectors in integration environment.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.LogConfiguration.DefaultCollectorUrlInProduction">
            <summary>
            Address of the Collectors in production environment.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.Source">
            <summary>
            <para>
            Name of the records' source (e.g. your team name).
            </para>
            <para>
            Validation: mustn't be neither null nor empty.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.MetricCadence">
            <summary>
            Sets the cadence at which all sampled metric objects, aggregated metric objects, and the aggregated statistics for operations should be sent to ARIA.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.EventCollectorUri">
            <summary>
            <para>
            URL of the Collector to which record packages will be sent.
            </para>
            <para>
            Validation: mustn't be null. <see cref="T:System.ArgumentNullException"/> is thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.EnableTelemetryUploaderMode">
            <summary>
            <para> 
            Enable to run the SDK in Telemetry Uploader mode. This mode should be used in scenarios where the main purpose of the service 
            is to upload telemetry to Aria. The SDK will assume that high volume of telemetry needs to be sent. 
            </para> 
            <para>
            In this mode, the SDK will use 10 sender threads, use a dequeue count of 3 and disable HMAC. The SDK will also block the calling 
            threads if the number of records kept in memory limit is exceeded. The SDK will Flush the records currently 
            in the queue and then unblock the calling threads.
            </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Applications.Telemetry.LogConfiguration.TelemetrySdkModeType" -->
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.RetryPolicy">
            <summary>
            Configures the retry policy.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.PerformanceCounter">
            <summary>
            Performance counter related options
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.Transmission">
            <summary>
            Transmission related options
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.Memory">
            <summary>
            Memory related options
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.Authentication">
            <summary>
            Auth related options
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.DataPackage">
            <summary>
            <para>
            This setting controls whether packages sent to the collector are compressed. If set to false, the package
            will not be compressed using gZip.    
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LogConfiguration.Identifiers">
            <summary>
            <para>
            Identifiers in form of Key/Value dictionary. 
            The identifiers dictionary is a piece of information
            that is constant across all calls to <c>SendRecord()</c> methods, so there is no point
            in attaching it to every single record (the identifiers are attached automatically
            to each record pack sent to Collectors).
            </para>
            <para>
            Validation: there must be at least one Key/Value pair and in each of the pairs both Key and Value 
            mustn't be neither null nor empty.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.LogConfiguration.GetTMBuilderFromConfig">
            <summary>
            Azure services can override specific parts of LogConfiguration in their Azure Service COnfiguration file. We will have to document this.
            e.g. To Override LogConfiguration.DataPackage.CompressPackage, create an Azure Service Configuration called "CompressPackage". 
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.MemoryConfiguration">
            <summary>
            Configures the memory related behavior for the Library
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.MemoryConfiguration.DataPackageSizeLimitBytes">
            <summary>
            <para>
            Number of bytes a single DataPackge sent to the Collectors can have. This limit is strictly obeyed
            and can't be exceeded even in "greedy batching" mode 
            (see <see cref="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.BatchesNumWaitingForSendingToKeepBatching"/> for more details).
            </para>
            <para>
            Setting this value to too low could result in small record packages 
            (DataPackges) and not optimal network usage.
            </para>
            <para>
            Validation: must be between 1 and <see cref="P:Microsoft.Applications.Telemetry.DataPackageConfiguration.CollectorRequestSizeLimitBytes"/>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para> 
            <remarks>
            Don't change this unless you really know what you do!
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.MemoryConfiguration.PoolBuffers">
            <summary>
            <para>Use a buffer pool for Log records, and byte arrays used during serialization and upload. May increase
            working set at the cost of reducing memory churn</para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.MemoryConfiguration.RecordsKeptInMemoryLimit">
            <summary>
            <para>
            Number of records that can be kept by the library in memory. 
            This constants can be used to control memory amount used by the library.
            </para>
            <para>
            Number of records kept by this library in memory can be high 
            due to delayed sending retries (e.g. caused by network problems).
            </para>
            <para>
            Validation: must be between 1 and <c>int.MaxValue</c>. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            <remarks>
            <para>
            To avoid exceeding this limit records are dropped 
            </para>
            <para>
            This is approximation only, because memory freeing is delayed (GC).
            </para>
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration">
            <summary>
            Configures the performance counter related options for the telemetry library
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration.AdditionalPerformanceCounters">
            <summary>
            This setting returns a comma delineated list of additional performance counters to be automatically sent. 
            <remarks>
            It must be not null, though it can be empty if no additional performance counters are intended to be provided. 
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration.DefaultPerformanceCounterCadence">
            <summary>
            <para>
            Specifies the cadence at which performance counters are sent out as a timespan.
            </para>
            <para>
            Validation: must be between 30 and <c>int.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration.QueuePollingInterval">
            <summary>
            <para>
            Frequency of reporting internal queues lengths to performance counters.
            </para>
            <para>
            Validation: must be between 10 milliseconds and 1 second. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration.Enabled">
            <summary>
            Gets information if Performance Counters should be generated by the library. 
            Note that in order to generate Performance Counters the library must be initialized
            with appropriate permissions. If no sufficient permissions available,
            the library will print a warning and skip performance counters creation.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration.CategoryName">
            <summary>
            This setting returns the configured performance counter category. 
            <remarks>
            It must be not null and not empty. 
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration.StatsResetInterval">
            <summary>
            <para>
            Interval after which internal statistics (then reported to performance counters) are reset. 
            This property should be kept in sync with performance counters frequency.
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.PerformanceCounterConfiguration.DisablePerformanceCounters">
            <summary>
            This method disables the performance counter setting. This is used when there is an exception while trying to register performance counters
            and we want to then initialize the telemetry manager with performance counters disabled.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.RetryConfiguration">
            <summary>
            Configures the various retry policies for the Telemetry manager
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.RetryConfiguration.MaxRetries">
            <summary>
            <para>
            Maximal number of retries which can be made for the same request in case of failed attempts
            to send data to the Collectors. It doesn't include the original attempt,
            so together <see cref="P:Microsoft.Applications.Telemetry.RetryConfiguration.MaxRetries"/> + 1 attempts can be made. Once all retries are exausted
            we check <see cref="P:Microsoft.Applications.Telemetry.RetryConfiguration.DequeueCount"/> to see if the individual record should be dropped or
            place back in the queue to be retried in a different request.
            </para>
            <para>
            The library uses exponential backoff algorithm (see <see cref="P:Microsoft.Applications.Telemetry.RetryConfiguration.BaseBackoffForSendingRetries"/>).
            </para>
            <para>
            Validation: must be not negative.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.RetryConfiguration.DequeueCount">
            <summary>
            <para>
            Maximal number of times a record should be dequeued and retried as part of a different request. Number of
            times each request is retried is based on <see cref="P:Microsoft.Applications.Telemetry.RetryConfiguration.MaxRetries"/>. This helps weed out records that
            may be invalid or records that are being rejected due to an issue on the collector.
            </para>
            <para>
            Validation: must be not negative.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.RetryConfiguration.BaseBackoffForSendingRetries">
            <summary>
            <para>
            Sleep duration after unsuccessful attempt to send data to the Collectors.
            If subsequent retries of sending the same data to the Collectors fail,
            then the backoff grows exponentially (up to <see cref="P:Microsoft.Applications.Telemetry.RetryConfiguration.MaxBackoffForSendingRetries"/>).
            </para>
            <para>
            Validation: must be between 1 milliseconds and 50 second. <see cref="T:System.ArgumentException"/> thrown otherwise.
            For motivation see: 
            <a href="https://confluence.skype.net/display/CLOUD/Dealing+with+Arbor+Mitigations+in+Azure">DDOS mitigation by Arbor</a>
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.RetryConfiguration.MaxBackoffForSendingRetries">
            <summary>
            <para>
            Maximal value of backoff which can be slept before
            retrying failed attempt to send data to the Collectors.
            <see cref="P:Microsoft.Applications.Telemetry.RetryConfiguration.BaseBackoffForSendingRetries"/> for more details.
            </para>
            <para>
            Validation: must be not lower than BaseBackoffForSendingRetries. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.TransmissionConfiguration">
            <summary>
            Controls the tranmission related options of the telemetry library.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.EnableAutomatedTelemetry">
            <summary>
            Gives the user the option of enabling all automated telemetry (disabled by default). This includes EventLogs, PerformanceCounters.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.DisableMultiTenantRequests">
            <summary>
            Gives the user the option of disabling multi-tenant requests. It should be disabled if you
            feel your service already has a high enough volume for efficient batching.
            
            <para>
            Only use this if you know what you are doing. 
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.KpiCadence">
            <summary>
            This setting controls the cadence at which the internal kpi metrics for the sdk should be sent.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.LimitingTraceLoggerCachingTime">
            <summary>
            This setting is related to Trace logs caching (so that "similar" lines 
            are not printed many times in short time period).
            Returned value is a <see cref="T:System.TimeSpan"/> in which tracing similar message would be skipped.
            If set to zero, traces caching is disabled. Everything is printed then.
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.ParallelSenderTasksNum">
            <summary>
            <para>
            Number of parallel sending threads. Each sending thread can be sending
            one record package at a time. So this property indirectly controls 
            number of open TCP connections.
            </para>
            <para>
            According to performance experiments default setting (2 senders) can handle
            up to 10000 records/second.
            </para>
            <para>
            Validation: must be between 1 and 20. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para> 
            <remarks>
            Don't change this unless you really know what you do!
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.CompressPackage">
            <summary>
            <para>
            This setting controls whether packages sent to the collector are compressed. If set to false, the package
            will not be compressed using gZip.    
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.WaitUntilNoRecordsTimeout">
            <summary>
            <para>
            Defines how long <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSentAsync"/> or 
            <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSent"/> can wait until it finishes with failure
            (throwing <see cref="T:System.OperationCanceledException"/> exception).
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TransmissionConfiguration.WaitUntilNoRecordsCheckingInterval">
            <summary>
            <para>
            Waiting time between checking if all records added to the library have been already send (or dropped),
            when handling <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSent"/> 
            or <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSentAsync"/>
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.ContextIdTag">
            <summary>
            Tag class that represents ContextId.
            It is translated into Record.ContextIds entry.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.IDataTagWrapper">
            <summary>
            Helper interface that wraps a tag. This is done to provide an adapter pattern for consumers who have
            already wrapped the existing data tags into their own classes. By coding those wrappers to this interface
            we can access the underlying data tags easily. 
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.PIITag">
            <summary>
            Tag class that represents PII data. 
            Strings that are tagged as PII will be scrubbed of PII. End users should not use this method. 
            They should use the Tag.WithPII static method.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DataTags.PIITag.PIIText">
            <summary>
            The string that will be printed to output when some PII content is tagged with the PIITag.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.PIITag.#ctor(System.String,Microsoft.Applications.Telemetry.DataModels.PIIKind)">
            <summary>
            Creates a new PII Tag. Please use the Tag.WithPII method to create a new PII tag.
            </summary>
            <param name="piiContent">the content that has PII</param>
            <param name="kind">the kind of PII</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.PIIExtensionMethods">
            <summary>
            Extension methods for PIITag for intellisense and dev productivity
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.PIIExtensionMethods.AddPII(Microsoft.Applications.Telemetry.DataModels.Record,System.String,System.String,Microsoft.Applications.Telemetry.DataModels.PIIKind)">
            <summary>
            Extension method on Record to add pii.
            </summary>
            <param name="record">record class</param>
            <param name="key">The key to the PII extensions dictionary. The key has to be unique for each pii content added to the same record</param>
            <param name="pii">the pii content</param>
            <param name="piiKind">the kind of PII</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.PstnTag">
            <summary>
            Tag class that represents Pstn.
            It is translated into Record.PstnNumbersComposite entry.
            <remarks>
            This class contains PII, so its content is not fully printed in <c>ToString()</c>.
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.DictionaryBasedTag`1">
            <summary>
            Tag class that represents simple string to TValue mapping.
            It is translated into Record.Xxx entry, where Xxx is specified by subclasses.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.ExtensionDoubleTag">
            <summary>
            Tag class that represents simple string to Double mapping.
            It is translated into Record.ExtensionDouble entry.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.ExtensionInt64Tag">
            <summary>
            Tag class that represents simple string to Int64 mapping.
            It is translated into Record.ExtensionInt64 entry.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.ConferenceTag">
            <summary>
            Tag class that represents a Conference.
            It is translated into Record.ConferenceComposite.
            <remarks>
            This class contains PII, so its content is not fully printed in <see cref="M:Microsoft.Applications.Telemetry.DataTags.ConferenceTag.ToString"/>.
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.ExceptionTag">
            <summary>
            Tag class that represents tag for an Exception.
            It is translated into Record.ExceptionInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.ExceptionTag.#ctor(System.Exception,System.Boolean)">
            <summary>
            Creates an instance of ExceptionTag class based on the parameters.
            </summary>
            <param name="exception">exception to represent</param>
            <param name="forceVerboseToString">if set to true then whole exception is printed in ToString method</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.UserTag">
            <summary>
            Tag class that represents a User.
            It is translated into Record.InitiatingUserComposite or Record.TargetUsersComposite.
            <remarks>
            This class contains PII, so its content is not fully printed in <see cref="M:Microsoft.Applications.Telemetry.DataTags.UserTag.ToString"/>.
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.UserTag.UserType">
            <summary>
            Describes user type that is represented by <see cref="T:Microsoft.Applications.Telemetry.DataTags.UserTag"/> class.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DataTags.UserTag.UserType.Initiating">
            <summary>
            Describes a User that initiated a call.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DataTags.UserTag.UserType.Target">
            <summary>
            Describes a user that is a target of a call.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.DataTagsHelper">
            <summary>
            Helper methods used by <see cref="T:Microsoft.Applications.Telemetry.AriaTraceListenerBase"/> to implement
            tagging related functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.DataTagsHelper.FindTags(System.Object[])">
            <summary>
            Scans <paramref name="argsToScan"/> and returns in the result all
            instances that derives from <see cref="T:Microsoft.Applications.Telemetry.DataTags.IDataTag"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.DataTagsHelper.ApplyTags(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataTags.IDataTag},Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            Apply information from all tags from <paramref name="tags"/> to <paramref name="record"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.IDataTag">
            <summary>
            Interface describing Tags that can be added to Trace invocations.
            The tags can be added to data sent to DataRV so that the traces can be
            correlated with other data (e.g. with different traces).
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.IDataTag.ApplyTo(Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            Apply content of this Tag to a record that represents a trace
            </summary>
            <param name="record">a record to apply the tag to</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.IDataTag.ToString">
            <summary>
            String representation of this Tag. This method is used to get text representation
            that is used in trace message.
            
            <remarks>
            PII mustn't be visible in the result of this method as it won't get scrubbed by DataRV!
            </remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.ExtensionTag">
            <summary>
            Tag class that represents simple string to string mapping.
            It is translated into Record.Extension entry.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataTags.Tag">
            <summary>
            The class provides set of helper functions that make Tags usage more convenient.
            So instead of calling Tag classes constructors directly a user can call the below helpers.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DataTags.Tag.PiiText">
            <summary>
            Label that is printed instead of PII data.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithExt(System.String,System.String)">
            <summary>
            Helper method to create an extension tag which is translated into Record.Extension entry.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithExtInt64(System.String,System.Int64)">
            <summary>
            Helper method to create an extension tag which is translated into Record.ExtensionInt64 entry.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithExtDouble(System.String,System.Double)">
            <summary>
            Helper method to create an extension tag which is translated into Record.ExtensionDouble entry.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithTargetUser(System.String,System.String,Microsoft.Applications.Telemetry.DataModels.Pstn,Microsoft.Applications.Telemetry.DataModels.Endpoint,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method to create a tag that represents a target User 
            which is translated into an entry in Record.TargetUsersComposite.
            <remarks>
            This tag contains PII, so its content is not fully printed in Trace message.
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithInitUser(System.String,System.String,Microsoft.Applications.Telemetry.DataModels.Pstn,Microsoft.Applications.Telemetry.DataModels.Endpoint,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Helper method to create a tag that represents a call initiating User 
            which is translated into an entry in Record.InitiatingUserComposite.
            <remarks>
            This tag contains PII, so its content is not fully printed in a Trace message.
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithPstn(System.String,System.String)">
            <summary>
            Helper method to create a tag that represents PSTN 
            which is translated into an entry in Record.PstnNumbersComposite.
            <remarks>
            This tag contains PII, so its content is not fully printed in a Trace message.
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithContexId(System.String,System.String)">
            <summary>
            Helper method to create a tag that represents an additional context id.
            It is translated into an entry in Record.ContextIds.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithConference(System.String,System.String,System.String)">
            <summary>
            Helper method to create a tag that represents a conference. 
            It is translated into Record.ConferenceComposite.
            <remarks>
            This tag contains PII, so its content is not fully printed in a Trace message.
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithException(System.Exception,System.Boolean)">
            <summary>
            Helper method to create a tag that represents an exception. 
            It is translated into Record.ExceptionInfo.
            </summary>
            <param name="exception">exception to represent</param>
            <param name="forceVerboseToString">
            If set to true then whole exception is printed in ToString method.
            Otherwise only exception type and message are printed.
            </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataTags.Tag.WithPII(System.String,Microsoft.Applications.Telemetry.DataModels.PIIKind)">
            <summary>
            Helper method to create a tag that represents PII content. It is translated into Record.PIIExtensions
            </summary>
            <param name="piiContent">The content which is PII</param>
            <param name="piiKind">The kind of PII</param>
            <remarks>
            All content that is passed in has PII, so the content is not fully printed in the trace message
            </remarks>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.AllTelemetryManagerCounters">
            <summary>
            Aggregation of all performance counters (all layers) from TelemetryManager.
            This class doesn't define new counters, it just collects them in one single place.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.AllTelemetryManagerCounters.InstallCounterCategory(System.String)">
            <summary>
            Installs the counter category and installs all known performance counters using the 
            performance counter registration facility.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.CountersMonitor">
            <summary>
            For user defined set of performance counters, the class pulls their values from OS and aggregates them,
            so that aggregates like Min, Max, Avg are available. 
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.CountersMonitor.CounterData">
            <summary>
            Helper class which describes single counter to monitor.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.CountersMonitor.#ctor(System.Collections.Generic.List{Microsoft.Applications.Telemetry.Diagnostics.CountersMonitor.CounterData},System.TimeSpan,System.Int32)">
            <summary>
            Ctor for CountersMonitor. 
            </summary>
            <param name="counterList">List of counters to monitor</param>
            <param name="pullingTime">Duration between gathering samples.</param>
            <param name="skipFirstNum">
            Allows to specify number of samples that should be skip at the beginning. It is useful
            because warming up period often is not interesting.
            </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.CountersMonitor.Start">
            <summary>
            Start monitoring. Can be called once only.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.CountersMonitor.Stop">
            <summary>
            Stop monitoring.
            Can be called once only.
            Start() must be called first.
            
            Note: this call can last up to pullingTime!
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.CountersMonitor.GetStats">
            <summary>
            Get already aggregated data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.LimitingTraceLogger">
            <summary>
            This class is designed to rate limit trace logs to the client library. 
            It does this by caching the template message for a limited and configurable 
            amount of time before logging a message again. 
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.LimitingTraceLogger.TraceDebug(System.String,System.Object[])">
            <summary>
            Not rate limited debug logging. So this will be a no-op at runtime if not in debug mode.
            This method is also used to inject errors into common places.
            </summary>
            <param name="msg">the message to print</param>
            <param name="args">the parameters to be formatted at print time</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.LimitingTraceLogger.CacheMessageAdded(System.String)">
            <summary>
            This synchronized method is getting an unformatted message and checks if it is contained in the cache.
            If not, it is added with a time expiration to the cache.
            One can turn the caching mechanism off by setting the expiration time to zero.
            </summary>
            <param name="msg">the unformatted message that wanted to be logged</param>
            <returns>true if the message was added to the cache (not already in there), false if it is still in the cache.</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.TraceProvider">
            <summary>
            This class is used to provide a mean to mock behavior from the outside, as MOQ doesn't mock static methods.
            It must be public because of DynamicProxy.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.TraceProvider.TraceDebug(System.String,System.Object[])">
            <summary>
            Trace <paramref name="msg"/> at Debug level.
            </summary>
            <param name="msg">message to trace</param>
            <param name="args">arguments</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.TraceProvider.TraceError(System.String,System.Object[])">
            <summary>
            Trace <paramref name="msg"/> at Error level.
            </summary>
            <param name="msg">message to trace</param>
            <param name="args">arguments</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.TraceProvider.TraceWarning(System.String,System.Object[])">
            <summary>
            Trace <paramref name="msg"/> at Warning level.
            </summary>
            <param name="msg">message to trace</param>
            <param name="args">arguments</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.TraceProvider.TraceInformation(System.String,System.Object[])">
            <summary>
            Trace <paramref name="msg"/> at Information level.
            </summary>
            <param name="msg">message to trace</param>
            <param name="args">arguments</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.Stats">
            <summary>
            This class provides decriptive statistics on a stream of data. 
            Currently following statistics are available: Min, Max, NumberOfSamples, Average and Variance. 
            The usage of the class is pretty simple: You only push data into the class using the push method. 
            Internally we use only a few doubles to keep track of the data, so you are able to store a large 
            amount of data in this class. The computation of the statistics follows Knuth TAOCP vol 2, 
            3rd edition, page 232. 
            From time to time, you might want to reset this class back to zero values to provide more 
            comprehensive stats. In this case, you can simply call the reset method. We recommend using 
            an asynchronous process to do this at a timely manner (e.g. a timer task that ticks every 60s).
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Diagnostics.Stats.SyncRoot">
            <summary>
            Synchronization object used to guarantee operations atomicity.
            It can be used externally to e.g. guarantee consistency between calls to GetMax() and GetNumberOfSamples().
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.Stats.Reset">
            <summary>
            This resets the statistics to defaults. This method is thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.Stats.Push(System.Double)">
            <summary>
            Pushes a new number into the statistics calculation. This method is thread-safe.
            </summary>
            <param name="number">the number that you want to record in the statistics.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.Stats.ComputeStatistics(System.Double)">
            <summary>
            Based on Knuth TAOCP Volume 2, 3rd edition, page 232.
            </summary>
            <param name="number">the next number to calculate the new statistics on.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.TimedStatsCounter">
            <summary>
            Abstraction for stats counter with timing functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.TimedStatsCounter.RecordStart">
            <summary>
            Starts internal timing, or if already running it will restart the timing. 
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.TimedStatsCounter.RecordFrequency">
            <summary>
            Records frequency calls. This can be used to measure how often a method has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.TimedStatsCounter.RecordEnd">
            <summary>
            Restarts the internal timing AND pushes data to the internal statistics counter.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.StatsCounter">
            <summary>
            Abstraction for _stats counter. This class provides decriptive statistics on a stream of data. 
            Currently following statistics are available: Min, Max, NumberOfSamples, Average and Variance. 
            The usage of the class is pretty simple: You only push data into the class using the push method. 
            Internally we use only a few doubles to keep track of the data, so you are able to store a large 
            amount of data in this class. The computation of the statistics follows Knuth TAOCP vol 2, 
            3rd edition, page 232. 
            From time to time, you might want to reset this class back to zero values to provide more 
            comprehensive counters. In this case, you can simply call the reset method. We recommend using 
            an asynchronous process to do this at a timely manner (e.g. a timer task that ticks every 60s).
            
            Computed _stats are aggregated in variables and during Reset() event values aggregated during the whole
            interval are assigned to performance counters. As a result, performance counters values are delayed 
            by the whole interval, but they are consistent.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.StatsCounter.Reset">
            <summary>
            This resets the counters internally to zero. This method is thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.StatsCounter.Push(System.Int64)">
            <summary>
            Pushes a new number into the statistics calculation. This method is thread-safe.
            </summary>
            <param name="number">the number that you want to record in the statistics.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCounter">
            <summary>
            Abstraction for single counter.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools">
            <summary>
            Responsible for gathering CounterCreationData from all counters, creating counters category in the OS,
            registering the counters in the OS and Disposing them.
            <remarks>
            <para>
            The class is not thread safe! A caller is responsible for synchronization. 
            Please also note that required synchronization is process level (not only thread level)!
            This is because the fact that there could be e.g. two Server processes using the library at the same time,
            or two roles in Azure Emulator can run simultaneously.
            </para>
            <para>
            The required synchronization is more complex than just assuring that each method is called from one thread at a time.
            All operations related to performance counters category (created, deleted, checked if exist) must be coordinated.
            </para>
            <para>
            Taking this into account suggested way of synchronization is acquire a <see cref="T:System.Threading.Mutex"/> 
            before constructor and release it after call to <see cref="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.CreateCounters"/>.
            </para>
            TODO (pawelc): Get rid of this restriction. Move all the code operating on counters category
            to a single method and add synchronization there.
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.Register(System.Diagnostics.CounterCreationData,System.Action,System.Action)">
            <summary>
            It does nothing if performance counters are disabled!
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.Register(System.Collections.Generic.IEnumerable{System.Diagnostics.CounterCreationData},System.Action,System.Action)">
            <summary>
            It does nothing if performance counters are disabled!
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.CanPerformanceCountersBeCreated">
            <summary>
            Check if application has enough permissions to create performance counters
            </summary>
            <returns>true if application has enough permissions to create performance counters </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.TEST_ONLY_ResetCreatedFlag">
            <summary>
            Used for testing.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.ComputeShouldCountersBeEnabled(System.Boolean,System.Boolean,System.String)">
            <summary>
            <para>
            Computes if counters should be enabled. Logic is not very simple, unfortunately.
            If perf. counters category doesn't exist we behave as counters are disabled. 
            This is because we mustn't create OS perf. counter when a category doesn't exist.
            </para>
            <para>
            On the other hand, we want to attach to perf. counters if they exist in the OS
            (even if we don't have administrator privileges).
            </para>
            </summary>
            <param name="areCountersEnabledInSettings"></param>
            <param name="areCountersCreateable"></param>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.CreateCategoryAndCounters">
            <summary>
            Creates the counter category and all the counters belonging to it. 
            In case the category already exists, it will delete it. 
            This method needs elevated rights.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Diagnostics.PerformanceCountersRegistrationTools.InstallExistingCounters">
            <summary>
            In case there is a counter that wasn't registered yet, we will simply ignore it and instantiate the performance counter in 
            its callback. Even if a counter isn't registered in the OS, it can still be instantiated and method calls to it won't throw errors. 
            Only the result won't be propagated to the OS, thus we will warn the user in the trace about that.
            If a counter was registered in the OS before, we can safely create the counters in their callbacks and they will report values.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Diagnostics.TelemetryManagerCounters">
            <summary>
            Performance counters related to TelemetryManager.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.External.Clock">
            <summary>
            NOTE: THIS CODE IS COPIED FROM SERVICES!!!!!
            
            Clock object that allows us to have decoupled tests.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Clock.#ctor">
            <summary>
            Creates a new instance of the system clock.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1">
            <summary>
            NOTE: THIS CODE IS COPIED FROM SERVICES!!!!!
            Thread safe queue (using locks) to synchronize work between multiple producers/consumers.
            Enqueue and dequeue operations are done in batch to minimize contention and lock overhead.
            Allows the consumers to know when all produces have finished,
            so that the consumers themselves may terminate.
            </summary>
            <typeparam name="T">The type of the queue items.</typeparam>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1._queue">
            <summary>NOTE: Access to this data structure must be synchronized.</summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1"/> class. 
            </summary>
            <param name="maxRowsInQueue">Enqueue calls will be blocked on waiting for
            enough space to be available in the queue.</param>
            <param name="millisToSleepWhenQueueIsFullOrEmpty">Polling period in milliseconds
            for 1) Enqueue() calls that find the queue full; or 2) Dequeue() calls that
            find the queue empty. Must be > 0. We recommend 1ms as minimum, even for cpu
            bound operations, to avoid having a useless thread doing Sleep(0) and
            causing needless context changes - Sleep(0) may trigger a large number of times per millisecond.</param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1.CountWithoutLock">
            <summary>
            Gets the current size of the queue.
            NOTE: This call is not locked.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1.EnqueueSafe(System.Collections.Generic.List{`0})">
            <summary>
            Puts a batch of items in the queue. Enqueue calls will be blocked on waiting for
            enough space to be available in the queue.
            Cannot be called after MarkAllProducersAreCompleted().
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1.MarkAllProducersAreCompleted">
            <summary>
            Signals that all producers are done, so that consumers may exit once the queue is
            empty. No more Enqueues() are allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1.DequeueSafe(System.Int32)">
            <summary>
            Same as DequeueSafe but turns off timeout.
            </summary>
            <param name="maxRowsToDequeue">The maximum number of items that will be returned
            by this call. Less may be returned, but always more than zero (except when all
            producers are finished).</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.SynchronizedWaitingQueue`1.DequeueSafe(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Gets a batch of items from the queue. Dequeue calls will be blocked on waiting
            if the queue is empty, and MarkAllProducersAreCompleted() has not been called yet.
            The only situation where 0 items are returned is when the queue is empty AND all
            producers are finished, which means the the consumers may exit as well.
            </summary>
            <param name="maxRowsToDequeue">The maximum number of items that will be returned
            by this call. Less may be returned, but always more than zero (except when all
            producers are finished).</param>
            <param name="millisTimeout">This limits the amount of time we block when the
            queue is empty. This is only enforced if set > 0. Since we poll when checking
            if the queue has items, the amount of time before we return will be at most
            millisTimeout + millisToSleepWhenQueueIsFullOrEmpty</param>
            <param name="timedOut">If millisTimeout is > 0 and we return an empty 
            collection, if this value is true, we timed out, otherwise we returned 
            since producers are done.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.External.Preconditions">
            <summary>
            Provides helper methods to validate preconditions.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Check if the argument condition is true.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsNotNull``1(``0,System.String,System.String[])">
            <summary>
            Check if the argument is not null.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsNull``1(``0,System.String,System.String[])">
            <summary>
            Check if the argument is null.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsNotNullOrEmpty(System.String,System.String,System.String[])">
            <summary>
            Check if a string-argument is not null and not empty.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsValidSourceName(System.String,System.String,System.String[])">
            <summary>
            Check if the source string is valid i.e. it should only contain space, alpnanumeric characters or underscore
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsNotNegative(System.TimeSpan,System.String)">
            <summary>
            Check if the duration argument is not negative.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsNotNegative(System.Double,System.String)">
            <summary>
            Check if the duration argument is not negative.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsInRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Checks if a numeric argument is in a specific range.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsInRange(System.Int64,System.String,System.Int64,System.Int64)">
            <summary>
            Checks if a numeric argument is in a specific range.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsInRange(System.Double,System.String,System.Double,System.Double)">
            <summary>
            Checks if a numeric argument is in a specific range.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsLengthInRange``1(``0[],System.String,System.Int32,System.Int32)">
            <summary>
            Checks if the length of an array is in a specific range.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsCountInRange``1(System.Collections.Generic.ICollection{``0},System.String,System.Int32,System.Int32)">
            <summary>
            Checks if the count of a collection is in a specific range.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsValidBlobName(System.String)">
            Blobs: case sensitive, length 1-1024 (including 'directories'), not end in '.' or '/'
            Containers: start with letter or number, alpha num, lowercase, non-consecutive dashes allowed, 3-63 length
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsPropertyNameMatchingRegexp(System.String)">
            <summary>
            This method simulates @"^[a-zA-Z0-9](([a-zA-Z0-9]|_|\.){0,98}[a-zA-Z0-9])?$ regular expression.
            It turned out that evaluating the regular expression is very expensive (as it is applied to every extension).
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.IsValidToken(System.String,System.String,System.String[])">
            <summary>
            Checks if the tenant token is valid.
            Copied from Skype_Data_RV/Main/Services/Skype.Data.Coral.Core/AccessControl/TokenFactory.cs
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.External.Preconditions.ComputeChecksum(System.String)">
            <summary>
            Copied from Skype_Data_RV/Main/Services/Skype.Data.Coral.Core/AccessControl/TokenFactory.cs
            </summary>
            <param name="input">Token whose checksum needs to be calculated.</param>
            <returns>The tokens checksum.</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.InboundQueueManager">
            <summary>
            <para>
            Class responsible for managing the main inbound queue (the queue between public API 
            and <see cref="T:Microsoft.Applications.Telemetry.RecordBatcherTask"/>. The class makes operations related to
            <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSentAsync"/> functionality more convenient.
            </para>
            <para>
            The class introduce notion of the primary and secondary queues. The primary queue
            is the only queue that is connected to Batcher. Secondary queues are helpers queues
            created when <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSentAsync"/> operations
            are in progress (records are accumulated there and transferred to the primary queue when flush is completed).
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InboundQueueManager.AddRecordsToProperQueueIfEnoughTokens(System.Collections.Generic.List{Microsoft.Applications.Telemetry.RecordWithMetadata})">
            <summary>
            Acquire necessary tokens and add records to proper queue 
            (the primary queue if no flush in progress, a secondary queue otherwise)
            </summary>
            <param name="records">records to be added</param>
            <returns>Number of records added to the queue</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InboundQueueManager.AddRecordsToProperQueueAssumingTokensAcquired(System.Collections.Generic.List{Microsoft.Applications.Telemetry.RecordWithMetadata})">
            <summary>
            Add records to proper queue 
            (the primary queue if no flush in progress, a secondary queue otherwise).
            This method does not try to aquire before inserting into the queue. It assumes
            that it is being called from a point at which the tokens for the records have 
            already been obtained.
            </summary>
            <param name="records">records to be added</param>
            <returns>True if records added successfully, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InboundQueueManager.RedirectTrafficToNewSecondaryQueueAndWaitUntilItBecomesFirstAsync">
            <summary>
            <para>
            Redirect incoming records to a brand new secondary queue. This method is called at the beginning of 
            new <see cref="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.WaitUntilAllRecordsAreSentAsync"/> operation. This method finishes 
            when the just added secondary queue becomes the first secondary queue (all previous secondary queues are removed
            by call to <see cref="M:Microsoft.Applications.Telemetry.InboundQueueManager.GetRidOfFirstSecondaryQueue"/>.
            </para>
            <para>
            Call to <see cref="M:Microsoft.Applications.Telemetry.InboundQueueManager.GetRidOfFirstSecondaryQueue"/> for this new queue must be done 
            when this call is finished (not earlier).
            </para>
            </summary>
            <returns>task representing this operation</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InboundQueueManager.GetRidOfFirstSecondaryQueue">
            <summary>
            Remove the first secondary queue and transfer all records from it to the primary queue. This method is called
            when <see cref="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.WaitUntilAllRecordsAreSentAsync"/> is about to finish.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InboundQueueManager.AddRecordsToProperQueueUnsafe(System.Collections.Generic.List{Microsoft.Applications.Telemetry.RecordWithMetadata})">
            <summary>
            Add records to a proper queue (regular one or the queue for flushing).
            <remarks>
            Caller is responsible for synchronization!
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.LibraryInfo">
            <summary>
            Helper class. It contains information about library like its version and name.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.LibraryInfo.LibraryVersion">
            <summary>
            Get version of the library.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Applications.Telemetry.LibraryInfo.LibraryName" -->
        <member name="M:Microsoft.Applications.Telemetry.LibraryInfo.ToIdentifiers">
            <summary>
            Generates information about the library and returns it in form of Identifiers.
            </summary>
            <returns>Generated identifiers.</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.RecordBatcher">
            <summary>
            Batch Records (with respect to provided rules) into Record bundles which are placed in DataPackage later.
            
            Batching takes into account following dimensions:
            * Record count - each produced batch consists of no more than maxRecordsInBatchNum Records (soft limit)
            * batch size - maximal amount of bytes (computed as a sum of Records sizes after serialization) (hard limit)
            * batching duration - batch is finished if waiting for more than maxWaitingThreshold 
                                  is necessary (since the first Record arrived) (soft limit)
            
            We keep batching into a current batch, if a soft limit is reached, but Consumers (Senders currently) are busy,
            so there is no point in flushing next batch.
            
            We assume here that each Record is not larger than maximalRecordBatchSizeInBytes (exception thrown otherwise).
            
            Note: maximalRecordBatchSizeInBytes must be strictly obeyed, otherwise Collector can drop DataPackage.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.AddRecord(Microsoft.Applications.Telemetry.RecordWithMetadata)">
            <summary>
            Add already prepared <paramref name="record"/> to batch. Flush ready batch if necessary.
            </summary>
            <param name="record">record to add</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.FlushIfRecordsWaitLongEnough">
            <summary>
            Flush a batch if already added records wait long enough.
            This method should be called periodically!
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.ForceFlush">
            <summary>
            Force batch flush regardless of batching state.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.CheckConditionsAndFlushBatchIfNeeded">
            <summary>
            Flush the current batch if it's ready (e.g. enough Records accumulated, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.FlushBatch(Microsoft.Applications.Telemetry.RecordBatcher.FlushReason)">
            <summary>
            Take already accumulated Records and put them to the outbound queue.
            Also reset the current batch, so adding next Records is possible.
            </summary>
            <param name="reason">
            The reason why this batch must be flushed.
            </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.ResetBatch">
            <summary>
            Reset information about current batch. Called after a batch flushing to prepare room for a next batch.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.IsEnoughWorkForConsumersInOutboundQueue">
            <summary>
            Check if outbound queue has enough items inside, so that we can keep batching,
            even though a batch is ready (soft limit reached).
            
            Motivation here is that, there is no point in adding a batch to the outbound queue, if consumers are still busy
            (of course we must flush the batch, if we reach "hard limit" - like e.g. batch size).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.IsHardLimitReached(Microsoft.Applications.Telemetry.RecordBatcher.FlushReason@)">
            <summary>
            Check if we must flush the batch now.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcher.IsSoftLimitReached(Microsoft.Applications.Telemetry.RecordBatcher.FlushReason@)">
            <summary>
            Check if batch is "big" enough, so we can flush it.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcherHandler.IsEnoughWorkForConsumersInOutboundQueue">
            <summary>
            Check if outbound queue has enough items inside, so that we can keep batching,
            even though a batch is ready (soft limit reached).
            
            Motivation here is that, there is no point in adding a batch to the outbound queue, if consumers are still busy
            (of course we must flush the batch, if we reach "hard limit" - like e.g. batch size).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.RecordSizeComputer">
            <summary>
            RecordSizeComputer:
            * compute Record's serialized size
            * fire an event if it's too big
            
            The class also drops Record if it's size if too big (e.g. not acceptable by Collector).
            
            As computing the size could be expensive!
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.InternalLogManager">
            <summary>
            <para>
            Class for managing the singleton instance of the InternalLogger
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogManager.GetLogger(System.String,System.String)">
            <summary>
            Gets the logger with the specified tenantToken and source.
            </summary>
            <param name="tenantToken">The token for your tenant.</param>
            <param name="source">The name of an optional component in your application that can be used to group associated telemetry events.</param>
            <returns>Returns the ILogger instance with the specified tenantToken and source.</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogManager.SetContext(System.String,System.String,Microsoft.Applications.Telemetry.PiiType)">
            <summary>
            Add a named string property that should be sent with every event.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="piiKind">The piiKind of the property. The default kind indicates the property is not pii</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogManager.Initialize(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings)">
            <summary>
            <para>
            Initialize LogManager and create the default logger.
            </para>
            </summary>
            <param name="settings">TelemetryManagerSettings object which contains the common field values in its Identifiers dictionary.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.InternalLogManager.FlushAndDisableLoggers">
            <summary>
            Flushes high level apis and disables all loggers other than ones used internall to send KPI's
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.TraceMessages">
            <summary>
            Contains all the messages and message formats used for Tracing in the TelemetryManager
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Settings.ConfigurationKey">
            <summary>
            Base class for configuration keys.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.ConfigurationKey.#ctor(System.String[])">
            <summary>
            Create new instance basing on <paramref name="keyNames"/>
            </summary>
            <param name="keyNames"></param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.ConfigurationKey.AlternateKeys">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.ConfigurationKey.Keys">
            <summary>
            Gets all the keys that were associated with the annotated field.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.ConfigurationKey.Key">
            <summary>
            Gets a single key (common case) associated with the annotated field.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Settings.OptionalConfigurationKey">
            <summary>
            This class denotes and optional configuration key as an attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.OptionalConfigurationKey.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Applications.Telemetry.Settings.OptionalConfigurationKey"/> class. 
            Denotes an optional configuration value.
            </summary>
            <param name="keyNames">
            Supply one or n-values of the keys 
            that should be mapped to the annotated field.
            </param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Settings.MandatoryConfigurationKey">
            <summary>
            This class denotes a mandatory configuration key as an attribute.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.MandatoryConfigurationKey.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Applications.Telemetry.Settings.MandatoryConfigurationKey"/> class. 
            Denotes an mandatory configuration value.
            </summary>
            <param name="keyNames">
            Supply one or n-values of the keys 
            that should be mapped to the annotated field.
            </param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Settings.SettingsInjector">
            <summary>
            This class takes care of injecting Settings through the <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder"/> 
            from an external resource. The external resource only needs to expose a mapping between 
            key and value through a function that will return a string value for a string key. 
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.SettingsInjector.#ctor(System.String)">
            <summary>
            Create new instance of <see cref="T:Microsoft.Applications.Telemetry.Settings.SettingsInjector"/>
            </summary>
            <param name="namespaceIdentifier"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.SettingsInjector.InjectSettings(System.Func{System.String,System.String},Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder)">
            <summary>
            Create <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder"/> basing on settings retrieved from <paramref name="provider"/>
            and <paramref name="builder"/>.
            </summary>
            <param name="provider">settings provider</param>
            <param name="builder">builder with initial settings</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.SettingsInjector.PrepareFieldName(System.String)">
            <summary>
            Prepares a field name by removing the first char (_) and making the
            second character upper case. "_property" will become "Property".
            </summary>
            <param name="name">the property name to change</param>
            <returns>a transformed property name starting with an uppercase letter</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.SettingsInjector.RetrieveInjectionParameters(System.Func{System.String,System.String},Microsoft.Applications.Telemetry.Settings.ConfigurationKey,System.String[]@)">
            <summary>
            Retrieves the injection parameters from the configuration.
            </summary>
            <param name="provider">the config key value provider to provide a mapping</param>
            <param name="configKeyAttribute">the config key attribute that should be injected</param>
            <param name="args">the arguments for the injection parameter to be filled</param>
            <returns>false if attempted to inject a null value (not allowed), true if everything went correct.</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.SettingsInjector.ConvertFields(System.Reflection.FieldInfo,System.String[])">
            <summary>
            Currently only the following types are able to be parsed from a string configuration value:
            <list type="bullet">
            <item> <term>string</term> <description>the string type</description> </item> 
            <item> <term>primitives</term> <description>all primitive types if Convert.ChangeType() can convert them from string</description> </item> 
            <item> <term>timespans</term> <description>simple numeric values. NOTE timespans are parsed as millis</description> </item> 
            <item> <term>custom objects</term> <description>this method can create custom objects via a constructor that accepts one/multiple strings</description> </item> 
            </list>
            In case some field can't be converted from string, (e.g. when parsing 12abdc to an int) this method will throw a System.FormatException/System.InvalidCastException.
            </summary>
            <param name="fieldInfo">the field which needs to be set through a property</param>
            <param name="stringArgs">the not null, string arguments got from the configuration</param>
            <returns>an converted argument array that can be set to a property.</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder">
            <summary>
            <para>
            The class helps creating <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings"/> instance.
            <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings"/> is immutable (can't be changed after construction).
            </para>
            <para>
            To make building the settings more convenient please use this builder class.
            </para>
            </summary>
            <remarks>
            Validation of provided values occurs during <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> call (not during setting given property).
            </remarks>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.#ctor(System.String,Microsoft.Applications.Telemetry.Settings.AuthenticationSettings,System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Construct the builder with mandatory parameters.
            </summary>
            <param name="source">Name of the records' source (e.g. your team name). Mustn't be null.</param>
            <param name="authentication">Authentication settings. Mustn't be null.</param>
            <param name="collectorUrl">
            URL of the Collector to which records will be sent. 
            If null, then use default value <see cref="F:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultCollectorUrlInIntegration"/>
            </param>
            <param name="identifiers">Identifiers which are attached to each DataPackage. Could be null.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.#ctor(System.String,System.String,Microsoft.Applications.Telemetry.Settings.AuthenticationSettings,System.Uri,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Construct the builder with mandatory parameters.
            </summary>
            <param name="source">Name of the records' source (e.g. your team name). Mustn't be null.</param>
            <param name="tenantToken">The tenant token for your team.</param>
            <param name="authentication">Authentication settings. Mustn't be null.</param>
            <param name="collectorUrl">
            URL of the Collector to which records will be sent. 
            If null, then use default value <see cref="F:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultCollectorUrlInIntegration"/>
            </param>
            <param name="identifiers">Identifiers which are attached to each DataPackage. Could be null.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.#ctor(System.Boolean)">
            <summary>
            Default constructor of the builder.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.AuthenticationSettings">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.AuthenticationSettings"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Source">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.Source"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.CollectorUrl">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CollectorUrl"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Identifiers">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.Identifiers"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.MaxRetries">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRetries"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.DequeueCount">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DequeueCount"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.BaseBackoffForSendingRetries">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BaseBackoffForSendingRetries"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.MaxBackoffForSendingRetries">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxBackoffForSendingRetries"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.ParallelSenderTasksNum">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.ParallelSenderTasksNum"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.CollectorRequestSizeLimitBytes">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CollectorRequestSizeLimitBytes"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.DataPackageSizeLimitBytes">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DataPackageSizeLimitBytes"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.MaxRecordsInBatchNum">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRecordsInBatchNum"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.DefaultBatchingWaitingThreshold">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultBatchingWaitingThreshold"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.BatchingWaitingThresholdJitter">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchingWaitingThresholdJitter"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.BatchesNumWaitingForSendingToKeepBatching">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchesNumWaitingForSendingToKeepBatching"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.SingleWaitingOnDequeueDurationWhenBatching">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.SingleWaitingOnDequeueDurationWhenBatching"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.RecordsKeptInMemoryLimit">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.RecordsKeptInMemoryLimit"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.PerfCounterQueuePollingInterval">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerfCounterQueuePollingInterval"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.StatsResetInterval">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.StatsResetInterval"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.PerformanceCountersEnabled">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerformanceCountersEnabled"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.LimitingTraceLoggerCachingTime">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.LimitingTraceLoggerCachingTime"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.PerformanceCountersCategoryName">
            <summary>
            Gets or sets the performance counter category name. 
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.MaxRecordNumToDequeueAtOneTimeByBatcher">
            <summary>
            Gets or sets the maximal number of records that can be dequeued by Batcher at once. 
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.WaitUntilNoRecordsTimeout">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.WaitUntilNoRecordsTimeout"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.WaitUntilNoRecordsCheckingInterval">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.WaitUntilNoRecordsCheckingInterval"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.PoolBuffers">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PoolBuffers"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.CompressPackage">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CompressPackage"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.TenantToken">
            <summary>
            Gets or sets the tenant token for your team.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.AdditionalPerformanceCounters">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.AdditionalPerformanceCounters"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.DefaultPerformanceCounterCadence">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultPerformanceCounterCadence"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.EnableBeacons">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.EnableBeacons"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.DisableMultiTenantRequests">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DisableMultiTenantRequests"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.MetricCadence">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MetricCadence"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.KpiCadence">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.KpiCadence"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.EnableTelemetryUploaderMode">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.EnableTelemetryUploaderMode"/>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.TelemetrySdkModeType">
            <summary>
            Gets or sets value used in <see cref="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build"/> method to initialize
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.TelemetrySdkModeType"/>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.Build">
            <summary>
            <para>
            Create <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings"/> basing on values previously provided
            by calls to properties.
            </para>
            <remarks>
            Please keep in mind that validation is performed by <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings"/>,
            so if an incorrect setting was provided, then call to this method will throw.
            </remarks>
            </summary>
            <returns>settings constructed basing on properties values</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder.MergeWithReservedIdentifiers(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            <para>
            Add identifiers from <paramref name="userIdentifiers"/> to identifiers 
            from <paramref name="reservedIdentifiers"/> and save result in a new dictionary.
            </para>
            <para>
            If an identifier is present in both dictionaries then ArgumentException is thrown.
            </para>
            </summary>
            <param name="reservedIdentifiers"> Reserved identifiers generated by the library. Mustn't be null.</param>
            <param name="userIdentifiers">Identifiers generated by a user. Could be null.</param>
            <returns>Identifiers dictionary which is merge of the input data.</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings">
            <summary>
            All settings for <see cref="T:Microsoft.Applications.Telemetry.TelemetryManager"/> class. This class is immutable 
            (can't be changed after construction). Please use <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder"/>
            to make the settings creation process more convenient.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultPerformanceCountersCategoryName">
            <summary>
            Default performance counters category name used by the library.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.AllCollectorUrlsInProduction">
            <summary>
            Because of DNS resolution caching all azure VMs in the same DC were sending to a single Collector deployment.
            This was causing inefficient resources utilization (one Collector deployment was running hot, whereas 
            the other one was almost idle). 
            
            To workaround that, we select the url randomly on each VM (they all point to the same set of Collectors).
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultCollectorUrlInIntegration">
            <summary>
            Address of the Collectors in integration environment.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultCollectorUrlInProduction">
            <summary>
            Address of the Collectors in production environment.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.#ctor(System.String,Microsoft.Applications.Telemetry.Settings.AuthenticationSettings,System.Uri,System.Collections.Generic.Dictionary{System.String,System.String},System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.String,System.Nullable{System.Int32},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{Microsoft.Applications.Telemetry.SdkModeType})">
            <summary>
            Create <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings"/> basing on provided parameters.
            Usually it is called by <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder"/>.
            This method performs validation of provided parameters
            </summary>
            <param name="identifiers">sets value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.Identifiers"/></param>
            <param name="authentication">sets value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.AuthenticationSettings"/></param>
            <param name="source">sets value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.Source"/></param>
            <param name="collectorUrl">sets value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CollectorUrl"/></param>
            <param name="maxRetries">overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRetries"/></param>
            <param name="baseBackoffForSendingRetries">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BaseBackoffForSendingRetries"/>
            </param>
            <param name="maxBackoffForSendingRetries">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxBackoffForSendingRetries"/>
            </param>
            <param name="parallelSenderTasksNum">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.ParallelSenderTasksNum"/>
            </param>
            <param name="collectorRequestSizeLimitBytes">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CollectorRequestSizeLimitBytes"/>
            </param>
            <param name="dataPackageSizeLimitBytes">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DataPackageSizeLimitBytes"/>
            </param>
            <param name="maxRecordsInBatchNum">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRecordsInBatchNum"/>
            </param>
            <param name="defaultBatchingWaitingThreshold">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultBatchingWaitingThreshold"/>
            </param>
            <param name="batchingWaitingThresholdJitter">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchingWaitingThresholdJitter"/>
            </param>
            <param name="batchesNumWaitingForSendingToKeepBatching">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchesNumWaitingForSendingToKeepBatching"/>
            </param>
            <param name="singleWaitingOnDequeueDurationWhenBatching">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.SingleWaitingOnDequeueDurationWhenBatching"/>
            </param>
            <param name="recordsKeptInMemoryLimit">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.RecordsKeptInMemoryLimit"/>
            </param>
            <param name="perfCounterQueuePollingInterval">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerfCounterQueuePollingInterval"/>
            </param>
            <param name="statsResetInterval">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.StatsResetInterval"/>
            </param>
            <param name="performanceCountersEnabled">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerformanceCountersEnabled"/>
            </param>
            <param name="limitingTraceLoggerCachingTime">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.LimitingTraceLoggerCachingTime"/>
            </param>
            <param name="performanceCountersCategoryName">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerformanceCountersCategoryName"/>
            </param>
            <param name="maxRecordNumToDequeueAtOneTimeByBatcher">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRecordNumToDequeueAtOneTimeByBatcher"/>
            </param>
            <param name="waitUntilNoRecordsTimeout">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.WaitUntilNoRecordsTimeout"/>
            </param>
            <param name="waitUntilNoRecordsCheckingInterval">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.WaitUntilNoRecordsCheckingInterval"/>
            </param>
            <param name="poolBuffers">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PoolBuffers"/>
            </param>
            <param name="compressPackage">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CompressPackage"/>
            </param>
            <param name="tenantToken">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.TenantToken"/>
            </param>
            <param name="additionalPerformanceCounters">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.AdditionalPerformanceCounters"/>
            </param>
            <param name="defaultPerformanceCounterCadence">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultPerformanceCounterCadence"/>
            </param>
            <param name="enableBeacons">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.EnableBeacons"/>
            </param>
            <param name="metricCadence">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MetricCadence"/>
            </param>
            <param name="kpiCadence">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.KpiCadence"/>
            </param>
            <param name="enableTelemetryUploaderMode">
            overrides the default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.EnableTelemetryUploaderMode"/>
            </param>
            <param name="dequeueCount">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DequeueCount"/>
            </param>
            <param name="disableMultiTenantRequests">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DequeueCount"/>
            </param>
            <param name="telemetrySdkModeType">
            overrides default value for <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.TelemetrySdkModeType"/>
            </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DisablePerformanceCounters">
            <summary>
            This method disables the performance counter setting. This is used when there is an exception while trying to register performance counters
            and we want to then initialize the telemetry manager with performance counters disabled.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.Identifiers">
            <summary>
            <para>
            Identifiers in form of Key/Value dictionary. 
            The identifiers dictionary is a piece of information
            that is constant across all calls to <c>SendRecord()</c> methods, so there is no point
            in attaching it to every single record (the identifiers are attached automatically
            to each record pack sent to Collectors).
            </para>
            <para>
            Validation: there must be at least one Key/Value pair and in each of the pairs both Key and Value 
            mustn't be neither null nor empty.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.AuthenticationSettings">
            <summary>
            <para>
            Settings responsible for authentication of data sent by this instance of the library.
            </para>
            <para>
            Validation: mustn't be null.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.Source">
            <summary>
            <para>
            Name of the records' source (e.g. your team name).
            </para>
            <para>
            Validation: mustn't be neither null nor empty.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CollectorUrl">
            <summary>
            <para>
            URL of the Collector to which record packages will be sent.
            </para>
            <para>
            Validation: mustn't be null. <see cref="T:System.ArgumentNullException"/> is thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRetries">
            <summary>
            <para>
            Maximal number of retries which can be made for the same request in case of failed attempts
            to send data to the Collectors. It doesn't include the original attempt,
            so together <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRetries"/> + 1 attempts can be made. Once all retries are exausted
            we check <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DequeueCount"/> to see if the individual record should be dropped or
            place back in the queue to be retried in a different request.
            </para>
            <para>
            The library uses exponential backoff algorithm (see <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BaseBackoffForSendingRetries"/>).
            </para>
            <para>
            Validation: must be not negative.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DequeueCount">
            <summary>
            <para>
            Maximal number of times a record should be dequeued and retried as part of a different request. Number of
            times each request is retried is based on <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRetries"/>. This helps weed out records that
            may be invalid or records that are being rejected due to an issue on the collector.
            </para>
            <para>
            Validation: must be not negative.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BaseBackoffForSendingRetries">
            <summary>
            <para>
            Sleep duration after unsuccessful attempt to send data to the Collectors.
            If subsequent retries of sending the same data to the Collectors fail,
            then the backoff grows exponentially (up to <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxBackoffForSendingRetries"/>).
            </para>
            <para>
            Validation: must be between 1 milliseconds and 50 second. <see cref="T:System.ArgumentException"/> thrown otherwise.
            For motivation see: 
            <a href="https://confluence.skype.net/display/CLOUD/Dealing+with+Arbor+Mitigations+in+Azure">DDOS mitigation by Arbor</a>
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxBackoffForSendingRetries">
            <summary>
            <para>
            Maximal value of backoff which can be slept before
            retrying failed attempt to send data to the Collectors.
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BaseBackoffForSendingRetries"/> for more details.
            </para>
            <para>
            Validation: must be not lower than BaseBackoffForSendingRetries. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerfCounterQueuePollingInterval">
            <summary>
            <para>
            Frequency of reporting internal queues lengths to performance counters.
            </para>
            <para>
            Validation: must be between 10 milliseconds and 1 second. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.StatsResetInterval">
            <summary>
            <para>
            Interval after which internal statistics (then reported to performance counters) are reset. 
            This property should be kept in sync with performance counters frequency.
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.ParallelSenderTasksNum">
            <summary>
            <para>
            Number of parallel sending threads. Each sending thread can be sending
            one record package at a time. So this property indirectly controls 
            number of open TCP connections.
            </para>
            <para>
            According to performance experiments default setting (2 senders) can handle
            up to 10000 records/second.
            </para>
            <para>
            Validation: must be between 1 and 20. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para> 
            <remarks>
            Don't change this unless you really know what you do!
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CollectorRequestSizeLimitBytes">
            <summary>
            <para>
            Value specified by Skype Data RV team. Should be kept in sync
            with maximal request size accepted by the Collectors.
            </para>
            <para>
            Validation: must be between 1 and <c>long.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para> 
            <remarks>
            Don't change this unless you really know what you do!
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DataPackageSizeLimitBytes">
            <summary>
            <para>
            Number of bytes a single DataPackge sent to the Collectors can have. This limit is strictly obeyed
            and can't be exceeded even in "greedy batching" mode 
            (see <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchesNumWaitingForSendingToKeepBatching"/> for more details).
            </para>
            <para>
            Setting this value to too low could result in small record packages 
            (DataPackges) and not optimal network usage.
            </para>
            <para>
            Validation: must be between 1 and <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CollectorRequestSizeLimitBytes"/>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para> 
            <remarks>
            Don't change this unless you really know what you do!
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRecordsInBatchNum">
            <summary>
            <para>
            Defines how many records can be batched into single record package.
            </para>
            <para>
            Setting this value to too low could result in small record packages 
            and not optimal network usage. Setting this value to too high 
            could increasing latency (time between adding records 
            to the library and real sending them to the Collectors).
            </para>
            <para>
            This value could be exceeded when "greedy batching" 
            (see <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchesNumWaitingForSendingToKeepBatching"/> for more details) 
            is active.
            </para>
            <para>
            Validation: must be between 1 and <c>int.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultBatchingWaitingThreshold">
            <summary>
            <para>
            Defines how long the library can keep batching since arrival
            of the first record in current batch. 
            </para>
            <para>
            Setting this value to too low could result in small record packages 
            and not optimal network usage. Setting this value to too high 
            could increasing latency (time between adding records 
            to the library and real sending them to the Collectors).
            </para>
            <para>
            This value could be exceeded when "greedy batching" 
            (see <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchesNumWaitingForSendingToKeepBatching"/> for more details) 
            is active.
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchingWaitingThresholdJitter">
            <summary>
            Random jitter applied to <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultBatchingWaitingThreshold"/>. 
            This makes difference in heavily multi-headed environments like e.g. OTEL.
            <para>
            Validation: must be null or between 0 and 0.9. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.BatchesNumWaitingForSendingToKeepBatching">
            <summary>
            <para>
            The property controls "greedy batching" optimization.
            If a number of batches ready to send is greater or equal to <c>value</c>
            then "greedy batching" becomes activated.
            </para>
            <para>"Greedy batching" means: keep batching even though either
            <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRecordsInBatchNum"/> or <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultBatchingWaitingThreshold"/> 
            limit is exceeded. This optimization maximizes record package size basing
            on assumption that there is no point in adding next record package to
            Senders' queue if there is sufficient amount of packages there.
            </para>
            <para>
            Please note that "greedy batching" honors <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DataPackageSizeLimitBytes"/> limit.
            </para>
            <para>
            Set to very big value (e.g. to <see cref="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.RecordsKeptInMemoryLimit"/>) 
            to disable "greedy batching"
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.SingleWaitingOnDequeueDurationWhenBatching">
            <summary>
            <para>
            Maximal sleeping time when getting a record from batcher inbound queue. 
            This setting is very internal and shouldn't be modified.
            Too large value can increase records processing latency.
            Too small value can increase CPU consumption.
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.RecordsKeptInMemoryLimit">
            <summary>
            <para>
            Number of records that can be kept by the library in memory. 
            This constants can be used to control memory amount used by the library.
            </para>
            <para>
            Number of records kept by this library in memory can be high 
            due to delayed sending retries (e.g. caused by network problems).
            </para>
            <para>
            Validation: must be between 1 and <c>int.MaxValue</c>. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            <remarks>
            <para>
            To avoid exceeding this limit records are dropped 
            (a user can be notified about this if registered for <see cref="E:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents.PackageDropped"/>)!
            </para>
            <para>
            This is approximation only, because memory freeing is delayed (GC).
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerformanceCountersEnabled">
            <summary>
            Gets information if Performance Counters should be generated by the library. 
            Note that in order to generate Performance Counters the library must be initialized
            with appropriate permissions. If no sufficient permissions available,
            the library will print a warning and skip performance counters creation.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.LimitingTraceLoggerCachingTime">
            <summary>
            This setting is related to Trace logs caching (so that "similar" lines 
            are not printed many times in short time period).
            Returned value is a <see cref="T:System.TimeSpan"/> in which tracing similar message would be skipped.
            If set to zero, traces caching is disabled. Everything is printed then.
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PerformanceCountersCategoryName">
            <summary>
            This setting returns the configured performance counter category. 
            <remarks>
            It must be not null and not empty. 
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MaxRecordNumToDequeueAtOneTimeByBatcher">
            <summary>
            <para>
            Define how many records are dequeued from the Batcher inbound queue at a time.
            Setting to low value might increase synchronization cost. Don't change unless
            you exactly know the consequences.
            </para>
            <para>
            Validation: must be between 1 and <c>int.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.WaitUntilNoRecordsTimeout">
            <summary>
            <para>
            Defines how long <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSentAsync"/> or 
            <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSent"/> can wait until it finishes with failure
            (throwing <see cref="T:System.OperationCanceledException"/> exception).
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.WaitUntilNoRecordsCheckingInterval">
            <summary>
            <para>
            Waiting time between checking if all records added to the library have been already send (or dropped),
            when handling <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSent"/> 
            or <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSentAsync"/>
            </para>
            <para>
            Validation: must be not negative. <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.PoolBuffers">
            <summary>
            <para>Use a buffer pool for Log records, and byte arrays used during serialization and upload. May increase
            working set at the cost of reducing memory churn</para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.CompressPackage">
            <summary>
            <para>
            This setting controls whether packages sent to the collector are compressed. If set to false, the package
            will not be compressed using gZip.    
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.TenantToken">
            <summary>
            This setting returns the tenant token for your team.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.AdditionalPerformanceCounters">
            <summary>
            This setting returns a comma delineated list of additional performance counters to be automatically sent. 
            <remarks>
            It must be not null, though it can be empty if no additional performance counters are intended to be provided. 
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DefaultPerformanceCounterCadence">
            <summary>
            <para>
            Specifies the cadence at which performance counters are sent out as a timespan.
            </para>
            <para>
            Validation: must be between 30 and <c>int.MaxValue</c>. 
            <see cref="T:System.ArgumentException"/> thrown otherwise.
            </para>
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.EnableBeacons">
            <summary>
            Gives the user the option of enabling all automatic beacons from being sent.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.DisableMultiTenantRequests" -->
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.MetricCadence">
            <summary>
            Specifies the cadence at which all sampled metric objects, aggregated metric objects, and the aggregated statistics for operations should be sent to ARIA.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.KpiCadence">
            <summary>
            Specifies the cadence at which the internal kpi metrics for the sdk should be sent.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.EnableTelemetryUploaderMode">
            <summary>
            <para> 
            Enable to run the SDK in Telemetry Uploader mode. This mode should be used in scenarios where the main purpose of the service 
            is to upload telemetry to Aria. The SDK will assume that high volume of telemetry needs to be sent. 
            </para> 
            <para>
            In this mode, the SDK will use 10 sender threads, use a dequeue count of 3 and disable HMAC. The SDK will also block the calling 
            threads if the number of records kept in memory limit is exceeded. The SDK will Flush the records currently 
            in the queue and then unblock the calling threads.
            </para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings.TelemetrySdkModeType" -->
        <member name="T:Microsoft.Applications.Telemetry.Settings.AuthenticationSettings">
            <summary>
            The class represents settings which are used to authenticate data sent by the library.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Settings.AuthenticationSettings.#ctor(System.String,System.String)">
            <summary>
            Create the class with specified <paramref name="clientId"/> and <paramref name="clientKey"/>
            </summary>
            <param name="clientId">identifies the client sending data</param>
            <param name="clientKey">secret key which authenticates the client</param>
            <exception cref="T:System.ArgumentException">
            if either <paramref name="clientId"/> or <paramref name="clientKey"/> is null or empty.
            </exception>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.AuthenticationSettings.ClientId">
            <summary>
            Gets client identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.Settings.AuthenticationSettings.ClientKey">
            <summary>
            Gets client secret key. It's internal, so that no one can easily print it.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ExponentialRetryPolicy">
            <summary>
            Retry policy with exponential backoffs (with randomization).
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ExponentialRetryPolicy.#ctor(System.TimeSpan,System.Int32,System.TimeSpan)">
            <summary>
            Construct ExponentialRetryPolicy
            </summary>
            <param name="baseBackoff">Base backoff which is exponentially increased in consecutive retries</param>
            <param name="maxRetriesNum">Maximal number of retries (initial attempt is not included here)</param>
            <param name="maxBackoff">Maximal value of backoff</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.IRetryPolicyFactory">
            <summary>
            Factory for RetryPolicy.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.IRetryPolicy">
            <summary>
            Policy of making retries when a request sending attempt finished with failure.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.IRetryPolicy.ShouldRetry(System.TimeSpan@,System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Compute sleep duration which should be waited before next attempt 
            or inform no more attempts should be made.
            </summary>
            <param name="waitDuration">How much time should be waited before next attempt</param>
            <param name="httpStatus">Status of the last Http reply. Null if status is unknown.</param>
            <returns>
            True if next retry should be made. If it should, 
            waitDuration is set to sleeping duration before retrying
            </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.IRetryPolicy.ShouldNotRetryBecauseNonRetryableStatus(System.Nullable{System.Net.HttpStatusCode})">
            <summary>
            Checks to see if the reason to not retry is because the HttpStatus was non retryable.
            </summary>
            <returns>True if we should not retry because of non retryable status</returns>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.SendTask">
            <summary>
            SendTask reads Record batches from the inbound queue, serialize them and send to the Collectors.
            
            The work is performed in SendTask's thread.
            
            As serializing and sending to the Collectors could be expensive parallelization is possible: 
            many SendTask could be created and configured to read from the same queue.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.SendTask.Wait">
            <summary>
            Wait until all batches are sent.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.SendTask.ProcessQueue">
            <summary>
            Main loop of the sender. Let's send batches until the inbound queue is completed.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataPackageSender">
            <summary>
            Serialize and send DataPackage to the Collector.
            Handle retries.
            It blocks until DataPackage is sent or abandoned.
            
            Not thread safe!
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSender.SendToCollectorNoRetry(System.Collections.Generic.Dictionary{System.String,Microsoft.Applications.Telemetry.DataModels.DataPackage},System.Int32)">
            <summary>
            Perform real sending (serialize DataPackage first).
            
            protected and virtual for testing purpose.
            </summary>
            <param name="tokenToDataPackage"></param>
            <param name="retryNum"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSender.DropRecordsThatExceedDeadLetterCountOtherwiseAddBackToQueue(Microsoft.Applications.Telemetry.DataModels.DataPackage,System.String,System.Collections.Generic.List{System.Exception})">
            <summary>
            Drop records that have reached the dead letter count, otherwise put them back in the inbound queue. 
            </summary>
            <param name="dataPackage"></param>
            <param name="tenantToken"></param>
            <param name="caughtExceptions"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSender.TriggerRetryEventIfRequestContainsRecordsRetriedDueToDequeue(Microsoft.Applications.Telemetry.DataModels.DataPackage,System.String)">
            <summary>
            Check to see if the during the requests first attempt there are some records that are being retried
            because they were dequeued.
            </summary>
            <param name="dataPackage"></param>
            <param name="tenantToken"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSender.PrepareAndIssueRequest(System.Collections.Generic.Dictionary{System.String,Microsoft.Applications.Telemetry.DataModels.DataPackage},System.Int32)">
            <summary>
            Create HttpWebRequest, propagate data from DataPackages and Settings into it (serialization),
            authenticate (with HMAC) and start sending over network to Collector.
            </summary>
            <param name="tokenToDataPackage"></param>
            <param name="retryNum"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSender.DataPackageToStream(System.Collections.Generic.Dictionary{System.String,Microsoft.Applications.Telemetry.DataModels.DataPackage},System.String,System.Int32,System.IO.Stream)">
            <summary>
            Serialize dataPackages to stream (using Bond and HMAC authentication).
            
            Made static and public because it is also used to determine Record batch size (used by RecordBatcher).
            It is essential to keep these two places synchronized
            (Record batch size computation and sending DP to Collector).
            </summary>
            <param name="tokenToDataPackage"></param>
            <param name="authenicationKey">Authentication key for HMAC</param>
            <param name="sendRetryNum"></param>
            <param name="outStream">Stream to write the output to. It must support seeking!</param>       
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSender.CompressStream(System.IO.MemoryStream)">
            <summary>
            Compress the stream containing the serialized datapackage using gZip
            </summary>
            <param name="memoryStream">Stream containing the serialized datapackage. The compressed bytes will be written to this stream overwritting the previous bytes. 
            The memory stream will also be closed but the underlying compressed bytes can be accessed using memoryStream.ToArray().
            </param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.ITelemetryManager">
            <summary>
            Interface representing Telemetry Manager. It allows a user to send events (called records) 
            to the Skype Data RV Pipeline.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ITelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="record">A record to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ITelemetryManager.SendRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="records">Records to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ITelemetryManager.SendRecordWithToken(Microsoft.Applications.Telemetry.DataModels.Record,System.String)">
            <summary>
            Note: This method should only be used if you need the telemetry manager to support more than one tenant token.
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="record">A record to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ITelemetryManager.SendRecordsWithToken(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)">
            <summary>
            Note: This method should only be used if you need the telemetry manager to support more than one tenant token.
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="records">Records to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ITelemetryManager.GetTelemetryManagerEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ITelemetryManager.GetTelemetryEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.ITelemetryManager.WaitUntilAllRecordsAreSent">
            <summary>
      <para>
        Wait until all records added to the library so far have been sent (or dropped
        e.g. because of network problems).
      </para>
      <para>
        This method is thread safe. You can call it many times in parallel as well as you can call
        <see cref="M:Microsoft.Applications.Telemetry.ITelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)" /> when it's being executed.
      </para>
      <para>
        This method is VERY EXPENSIVE compared to others. It requires a lot of synchronization.
        It also slows down processing of new records, actually new records are not processed at
        all while this method is in progress. Instead, they are accumulated in dedicated queue
        and transfered to the primary queue when this operation is done.
      </para>
      <para>
        If second call to this method is issued before the first finished then the second call
        will wait until records added to the library between the first and the second call are sent.
        If there were no records added between two calls to 
        If there were no records added between two calls to 
        then the second one will be obviously flush no records.
      </para>
      <para>
        If execution of this method is longer than <c>TelemetryManagerSettings.WaitUntilNoRecordsTimeout</c>
        then <see cref="T:System.OperationCanceledException" /> exception is thrown.
        The timer starts after all previous calls to finished.
        The timer starts after all previous calls to finished.
      </para>
      <remarks>
        You mustn't call this method after a call to .
        You mustn't call this method after a call to .
      </remarks>
      <remarks>
        DISCLAMER: This method is not part of supported API. Currently this method is experimental
        and can change or be removed anytime without any notice!!!
      </remarks>
    </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.ITelemetryManager.Settings">
            <summary>
      <para>
        Gets the current settings used by the Telemetry Manager.
        Please note that returned object is immutable.
      </para>
    </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.RecordBatcherTask">
            <summary>
            <para>
            Execute code related to computing record sizes and batching them.
            </para>
            <para>
            Threading model: all private methods are called by a single thread - 
            the thread associated with this instance of <see cref="T:Microsoft.Applications.Telemetry.RecordBatcherTask"/>. 
            All public methods must consider synchronization problems between a caller and 
            <see cref="T:Microsoft.Applications.Telemetry.RecordBatcherTask"/> thread.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcherTask.Wait">
            <summary>
            Wait until all Records get processed.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcherTask.IsRunning">
            <summary>
            Checks if the current task state is running.
            </summary>
            <returns>true if running, false if not</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.RecordBatcherTask.ProcessQueue">
            <summary>
            Main loop of the batcher. Let's batch until the inbound queue is completed.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.RecordWithMetadata">
            <summary>
            Helper class, keep additional info about a Record.
            
            It is good place to keep e.g. all kind of receipts.
            </summary>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.DataPackageSizeHelper">
            <summary>
            A helper class.
            </summary>
        </member>
        <member name="F:Microsoft.Applications.Telemetry.DataPackageSizeHelper.SafetyMargin">
            <summary>
            Additional margin used when computing maximal Record batch size.
            It is added because Bond serialization adds a few more bytes 
            when it serializes long list of Records (compared to empty/short list of Records).
            Bond uses less space to represent 'count' for short lists.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSizeHelper.ComputeSizeOfDataPackageAfterSerializationToHttpRequest(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings,System.Collections.Generic.List{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            Compute size after serialization of a DataPackage created basing on parameter 'settings'.
            This method is used to determine size of batches that should be produced by RecordBatcher.
            </summary>
            <param name="settings">Settings used to populate DataPackage fields</param>
            <param name="records">Records which should be put in DataPackage for which we compute the size</param>
            <returns>
            Number of bytes a http request to Collector will have for DataPackage containing provided records
            </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSizeHelper.ComputeSizeOfRecordAfterSerializationInBytes(Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            For provided Record, compute its size after serialization.
            </summary>
            <returns>Size in bytes after serialization</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.DataPackageSizeHelper.ComputeMaximalRecordBatchSizeInBytes(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings)">
            <summary>
            Compute maximal size of Record batch which is used by RecordBatcher.
            
            Before sending to Collector the Records are wrapped with DataPackage (which contains 
            additional information), so the Recors batch must leave some space for the information
            from DataPackage. 
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Serializer.Serialize(Microsoft.Bond.IBondSerializable,System.IO.Stream)">
            <summary>
            Serialize provided object using Bond to outStream.
            </summary>
            <param name="objToSerialize"></param>
            <param name="outStream"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.Serializer.SerializeWithHmac(Microsoft.Bond.IBondSerializable,System.String,System.IO.Stream)">
            <summary>
            Serialize objToSerialize using Bond to outStream and also authenticate it (with HMAC).
            
            First HashSize bytes of the output stream is hash and the rest of the stream is serialized object.
            </summary>
            <param name="objToSerialize"></param>
            <param name="authenicationKey">Authentication key for HMAC</param>
            <param name="outStream">Stream to write the output to. It must support seeking.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.AriaTraceListenerBase">
            <summary>
            Forwards all messages sent to Trace to the Skype Pipe.
            Note: the class is mostly "copy paste" from old version of the library 
            (and it's far away from being perfect)!
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.#ctor(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder,System.Diagnostics.SourceLevels,System.String,System.Boolean)">
            <summary>
            <para>
            Initializes a new instance of the <see cref="T:Microsoft.Applications.Telemetry.AriaTraceListenerBase" /> class
            basing on settings from <paramref name="settingsBuilder"/>.
            </para>
            </summary>
            <param name="settingsBuilder">
            settings which should be used by the new <see cref="T:Microsoft.Applications.Telemetry.AriaTraceListenerBase"/>
            </param>
            <param name="defaultFilteringLevel">represents initial traces filtering level</param>
            <param name="eventName">
            A prefix which will be added to each eventType when converting Trace Event to Data RV record.
            If you not sure, you can leave it empty.
            </param>
            <param name="splitTracesByLevel">
            Indicates whether we should send up separate event Names for each TraceLevel. It defaults to false. 
            For e.g if traceEventName is set to "MyRoleTrace" and splitTracesByLevel is false, all logs will be sent up
            with event name as MyRoleTrace
            But if splitTracesByLevel is set to true, then the logs will sent up with event names as
            MyRoleTraceInformation, MyRoleTraceError, MyRoleWarning. 
            Sending them up as separate event names could make searching through the logs faster if you knew up front that 
            you only wanted to look through warnings or errors. 
            </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.GetTelemetryManagerEvents">
            <summary>
            Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents"/> for the trace listener.
            </summary>
            <returns>the events manager</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.GetReadOnlyTelemetryManagerSettings">
            <summary>
            Gets <see cref="T:Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings"/> for the trace listener. 
            Please not that the settings are immutable.
            </summary>
            <returns>immutable settings</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.Write(System.String)">
            <summary>
                Writes the specified message to the listener.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.WriteLine(System.String)">
            <summary>
                Writes the specified message to the listener.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
                Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
                Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
                Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
                Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.AriaTraceListenerBase.IsThreadSafe">
            <summary>
            Mark this trace listener as thread safe. This removes a global lock when 
            multiple threads are attempting to use AriaTraceListener.  This is not sufficient to make 
            tracing multi-threaded -- to achieve this, you must ALSO turn off the UseGlobalLock property 
            in the .NET trace infrastructure.
            http://msdn.microsoft.com/en-us/library/system.diagnostics.trace.usegloballock(v=vs.110).aspx 
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the object. Before disposing waits until all added events
            are really sent to the Collector (or dropped in case of network problems).
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.PrepareLogRecord(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataTags.IDataTag})">
            <summary>
            Creates a record which represent the trace event.
            </summary>
            <param name="eventCache">The event cache.</param>
            <param name="source">The source.</param>
            <param name="eventType">Type of the event.</param>
            <param name="id">The id.</param>
            <param name="message">The message.</param>
            <param name="tags">Tags that enable better data correlation.</param>
            <returns>record which represents the event</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.InjectSettings(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettingsBuilder)">
            <summary>
            Inject settings which are good for trace listeners. The method doesn't override 
            already provided settings.
            </summary>
            <param name="settingsBuilder">a builder to inject the settings to</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.AriaTraceListenerBase.SendLog(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataTags.IDataTag})">
            <summary>
            Sends the log.
            </summary>
            <param name="eventCache">The event cache.</param>
            <param name="source">The source.</param>
            <param name="eventType">Type of the event.</param>
            <param name="id">The id.</param>
            <param name="message">The message.</param>
            <param name="tags">Tags that enable better data correlation.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.StaticTelemetryManager">
            <summary>
            <para>
            Wrapper for TelemetryManager which provides static methods to access TelemetryManager functionality
            (the TelemetryManager is hidden in this class and can't be accessed from outside). 
            </para>
            <para>
            This is internal class - shouldn't be used by final user. On top of this class two publicly available 
            wrappers has been created: ServerTelemetryManager and AzureTelemetryManager. Their role is to make
            StaticTelemetryManager usage more convenient for the end user.
            </para>
            <para>
            Because this class (and the Azure and Server wrapper too) is static, the end user can send his events
            easily form every place in his code.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.Initialize(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings,Microsoft.Applications.Telemetry.Constants.TelemetryManagerType)">
            <summary>
            <para>
            Initialize underlying TelemetryManager. All public Initialize() from Azure/Server wrappers fall back to this one.
            </para>
            <para>
            It can be called only once, otherwise ArgumentException is thrown.
            </para>
            </summary>
            <param name="settings">settings to use</param>
            <param name="type">the parent telemetry manager type</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            <para>
      One of initialization method must be called first.
      Calling this method after <see cref="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.FlushAndDispose(Microsoft.Applications.Telemetry.BehaviorAfterDispose)" /> results in dropping passed records without notification
      (unless <c>behaviorAfterDispose</c> specified otherwise).
    </para>
            </summary>
            <param name="record">A record to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.SendRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            <para>
      One of initialization method must be called first.
      Calling this method after <see cref="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.FlushAndDispose(Microsoft.Applications.Telemetry.BehaviorAfterDispose)" /> results in dropping passed records without notification
      (unless <c>behaviorAfterDispose</c> specified otherwise).
    </para>
            </summary>
            <param name="records">Records to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.SendRecordWithToken(Microsoft.Applications.Telemetry.DataModels.Record,System.String)">
            <summary>
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            <para>
      One of initialization method must be called first.
      Calling this method after <see cref="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.FlushAndDispose(Microsoft.Applications.Telemetry.BehaviorAfterDispose)" /> results in dropping passed records without notification
      (unless <c>behaviorAfterDispose</c> specified otherwise).
    </para>
            </summary>
            <param name="record">A record to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.SendRecordsWithToken(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)">
            <summary>
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            <para>
      One of initialization method must be called first.
      Calling this method after <see cref="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.FlushAndDispose(Microsoft.Applications.Telemetry.BehaviorAfterDispose)" /> results in dropping passed records without notification
      (unless <c>behaviorAfterDispose</c> specified otherwise).
    </para>
            </summary>
            <param name="records">Records to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.GetTelemetryManagerEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        One of initialization method must be called first!
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.GetTelemetryEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryEvents" /> which provides notifications related to various stages of the events
        as they pass through the SDK.
      </para>
      <para>
        One of initialization method must be called first!
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryEvents" /> associated with this Log Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.FlushAndDispose(Microsoft.Applications.Telemetry.BehaviorAfterDispose)">
            <summary>
      <para>
        Synchronously wait until all events added by the loggers are sent to the Collectors (or dropped)
        and then dispose the Telemetry Manager.
      </para>
      <para>
        After call to this method all events added to be sent are simply dropped without notification
        (unless <paramref name="behaviorAfterDispose" /> specifies otherwise).
      </para>
      <para>
        It can be called once only.
      </para>
    </summary><param name="behaviorAfterDispose">Defined behavior of methods of the library when the library is disposed.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.GetImmutableTelemetryManagerSettings">
            <summary>
      <para>
        Return current settings used by the Telemetry Manager.
        Please note that returned object is immutable.
      </para>
      <para>
        One of initialization method must be called first.
      </para>
    </summary><returns>Immutable settings used by the Telemetry Manager</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.InstallPerformanceCounterCategory(System.String)">
            <summary>
      Installs the performance counter category, including all the performance counter that are known.
      An example of use would be to call this method from an external script (e.g. at boot time or as a StartupTask in Azure),
      as this method doesn't need an initialized state of the TelemetryManager.
      Please consult the examples for further notice.
      <remarks>
        <para>
          This method must be called before any call to the initialization methods.
        </para>
        <para>
          For this method to work properly, you will need elevated rights.
        </para>
        <para>
          In case of upgrading (e.g. adding new performance counters in code, but without registering the category again),
          the library will skip the registration step of the new counters if no sufficient rights are available.
          That means that the library should not throw any errors in this upgrade scenario.
          However the unregistered counters aren't propagated back to the OS.
        </para>
      </remarks>
    </summary><param name="categoryName">
      Optional. Defines name of performance category counters should be installed into. It should be consistent with
      <c>"TelemetryManagerSettings.PerformanceCountersCategoryName" </c>
    </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.GetInstanceForDependencyInjection">
            <summary>
      <para>
        This is intended to use for backward compatibility or dependency injection.
        Gets the internal <see cref="T:Microsoft.Applications.Telemetry.ITelemetryManager" /> which is used to send the data.
      </para>
      <remarks>
        This is for advanced usage, we may introduce breaking changes to this interface in the future.
        DISCLAIMER: This method is only supported for limited usage of people who are aware of the consequences.
        You will lose all management that evolves around the interface, which possibly includes additional sanity checks,
        lifecycle management and thread-safetly providers. This, for example, includes the guards against double-disposal
        of the internal objects and buffers. Misuse will result in runtime failures.
      </remarks>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.ITelemetryManager" /> the internal Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.Flush">
            <summary>
      <para>
        Wait synchronously until all records added to the library so far have been sent (or dropped
        e.g. because of network problems).
      </para>
      <para>
        This method is thread safe.
      </para>
      <para>
        This method is VERY EXPENSIVE compared to others. It requires a lot of synchronization.
        It also slows down processing of new records, actually new records are not processed at
        all while this method is in progress. Instead, they are accumulated in dedicated queue
        and transfered to the primary queue when this operation is done.
      </para>
      <para>
        If second call to this method is issued before the first finished then the second call
        will wait until records added to the library between the first and the second call are sent.
      </para>
      <para>
        If execution of this method is longer than <c>TelemetryManagerSettings.WaitUntilNoRecordsTimeout</c>
        then <see cref="T:System.OperationCanceledException" /> exception is thrown.
        The timer starts after all previous calls to Flush finished.
      </para>
    </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.BackToUninitialized">
            <summary>
      Helper which must be used in tests only. It resets the Telemetry Manager state
      to the one from before initialization. If the class is still running,
      <c>FlushAndDispose()</c> is called first.
    </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.StaticTelemetryManager.AssertIsRunningOrSilentModeEnabled(System.String)">
            <summary>
            Assert that Initialize() has been already called. If the BehaviorAfterDispose is <see cref="F:Microsoft.Applications.Telemetry.BehaviorAfterDispose.ThrowExceptionsAfterDispose"/>
            then it also asserts that FlushAndDispose() hasn't been called.
            </summary>
            <param name="operation">Description of operation which called the Assert.</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.TelemetryManager">
            <summary>
            Implementation of <see cref="T:Microsoft.Applications.Telemetry.ITelemetryManager"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.#ctor(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings)">
            <summary>
            Creates new instance of <see cref="T:Microsoft.Applications.Telemetry.TelemetryManager"/> basing
            on provided <paramref name="settings"/>
            </summary>
            <param name="settings">
            settings which will be used by the new instance of the <see cref="T:Microsoft.Applications.Telemetry.TelemetryManager"/>
            </param>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TelemetryManager.Settings">
            <summary>
      <para>
        Gets the current settings used by the Telemetry Manager.
        Please note that returned object is immutable.
      </para>
    </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.InstallPerformanceCounterCategory(System.String)">
            <summary>
      Installs the performance counter category, including all the performance counter that are known.
      An example of use would be to call this method from an external script (e.g. at boot time or as a StartupTask in Azure),
      as this method doesn't need an initialized state of the TelemetryManager.
      Please consult the examples for further notice.
      <remarks>
        <para>
          This method must be called before any call to the initialization methods.
        </para>
        <para>
          For this method to work properly, you will need elevated rights.
        </para>
        <para>
          In case of upgrading (e.g. adding new performance counters in code, but without registering the category again),
          the library will skip the registration step of the new counters if no sufficient rights are available.
          That means that the library should not throw any errors in this upgrade scenario.
          However the unregistered counters aren't propagated back to the OS.
        </para>
      </remarks>
    </summary><param name="categoryName">
      Optional. Defines name of performance category counters should be installed into. It should be consistent with
      <c>"TelemetryManagerSettings.PerformanceCountersCategoryName" </c>
    </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="record">A record to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="records">Records to send.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecordWithToken(Microsoft.Applications.Telemetry.DataModels.Record,System.String)">
            <summary>
            Note: This method should only be used if you need the telemetry manager to support more than one tenant token.
            <para>
      Schedule sending a single record to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="record">A record to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecordsWithToken(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)">
            <summary>
            Note: This method should only be used if you need the telemetry manager to support more than one tenant token.
            <para>
      Schedule sending records to the Collectors and return immediately
      (don't wait for real sending the data over network).
    </para>
            <para>
      Note that the library batches records internally and groups them into larger portions
      before sending (to optimize network/CPU usage).
    </para><para>
      Data provided in the parameter is validated by call to <see cref="M:Microsoft.Applications.Telemetry.DataModels.Record.IsValid(System.String@)" />
    </para><para>
      One can get more insight into record(s) sending process by registering for
      events provided by <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" />.
    </para><para>
      The method is thread-safe.
    </para>
            </summary>
            <param name="records">Records to send.</param>
            <param name="tenantToken">Tenant token to use.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.GetTelemetryManagerEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.GetTelemetryEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSentAsync">
            <summary>
      <para>
        Wait until all records added to the library so far have been sent (or dropped
        e.g. because of network problems).
      </para>
      <para>
        This method is thread safe. You can call it many times in parallel as well as you can call
        <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)" /> when it's being executed.
      </para>
      <para>
        This method is VERY EXPENSIVE compared to others. It requires a lot of synchronization.
        It also slows down processing of new records, actually new records are not processed at
        all while this method is in progress. Instead, they are accumulated in dedicated queue
        and transfered to the primary queue when this operation is done.
      </para>
      <para>
        If second call to this method is issued before the first finished then the second call
        will wait until records added to the library between the first and the second call are sent.
        If there were no records added between two calls to 
        If there were no records added between two calls to 
        then the second one will be obviously flush no records.
      </para>
      <para>
        If execution of this method is longer than <c>TelemetryManagerSettings.WaitUntilNoRecordsTimeout</c>
        then <see cref="T:System.OperationCanceledException" /> exception is thrown.
        The timer starts after all previous calls to finished.
        The timer starts after all previous calls to finished.
      </para>
      <remarks>
        You mustn't call this method after a call to .
        You mustn't call this method after a call to .
      </remarks>
      <remarks>
        DISCLAMER: This method is not part of supported API. Currently this method is experimental
        and can change or be removed anytime without any notice!!!
      </remarks>
    </summary>
            <returns>Task representing job to be done</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.WaitUntilAllRecordsAreSent">
            <summary>
      <para>
        Wait until all records added to the library so far have been sent (or dropped
        e.g. because of network problems).
      </para>
      <para>
        This method is thread safe. You can call it many times in parallel as well as you can call
        <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)" /> when it's being executed.
      </para>
      <para>
        This method is VERY EXPENSIVE compared to others. It requires a lot of synchronization.
        It also slows down processing of new records, actually new records are not processed at
        all while this method is in progress. Instead, they are accumulated in dedicated queue
        and transfered to the primary queue when this operation is done.
      </para>
      <para>
        If second call to this method is issued before the first finished then the second call
        will wait until records added to the library between the first and the second call are sent.
        If there were no records added between two calls to 
        If there were no records added between two calls to 
        then the second one will be obviously flush no records.
      </para>
      <para>
        If execution of this method is longer than <c>TelemetryManagerSettings.WaitUntilNoRecordsTimeout</c>
        then <see cref="T:System.OperationCanceledException" /> exception is thrown.
        The timer starts after all previous calls to finished.
        The timer starts after all previous calls to finished.
      </para>
      <remarks>
        You mustn't call this method after a call to .
        You mustn't call this method after a call to .
      </remarks>
      <remarks>
        DISCLAMER: This method is not part of supported API. Currently this method is experimental
        and can change or be removed anytime without any notice!!!
      </remarks>
    </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.Dispose">
            <summary>
            Releases all resources used by the object. Before disposing waits until all added records
            are really sent to the Collector (or dropped in case of network problems).
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the object 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            True to release both managed and unmanaged resources; 
            false to release only unmanaged resources
            </param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.TelemetryManagerImpl">
            <summary>
            Actual implementation of ITelemetryManager
            </summary>
        </member>
        <member name="P:Microsoft.Applications.Telemetry.TelemetryManagerImpl.Settings">
            <summary>
      <para>
        Gets the current settings used by the Telemetry Manager.
        Please note that returned object is immutable.
      </para>
    </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.#ctor(Microsoft.Applications.Telemetry.Settings.TelemetryManagerSettings)">
            <summary>
            <para>
            Creates new instance of <see cref="T:Microsoft.Applications.Telemetry.TelemetryManagerImpl"/> basing on 
            <paramref name="settings"/>.
            </para>
            <para>
            It initializes all collaborators.
            </para>
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.InstallPerformanceCounterCategory(System.String)">
            <summary>
      Installs the performance counter category, including all the performance counter that are known.
      An example of use would be to call this method from an external script (e.g. at boot time or as a StartupTask in Azure),
      as this method doesn't need an initialized state of the TelemetryManager.
      Please consult the examples for further notice.
      <remarks>
        <para>
          This method must be called before any call to the initialization methods.
        </para>
        <para>
          For this method to work properly, you will need elevated rights.
        </para>
        <para>
          In case of upgrading (e.g. adding new performance counters in code, but without registering the category again),
          the library will skip the registration step of the new counters if no sufficient rights are available.
          That means that the library should not throw any errors in this upgrade scenario.
          However the unregistered counters aren't propagated back to the OS.
        </para>
      </remarks>
    </summary><param name="categoryName">
      Optional. Defines name of performance category counters should be installed into. It should be consistent with
      <c>"TelemetryManagerSettings.PerformanceCountersCategoryName" </c>
    </param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)">
            <summary>
            For general comments see <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)"/>.
            This implementation just forwards to <see cref="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})"/>
            </summary>
            <param name="record">a record to send</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})">
            <summary>
            For general comments see <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record})"/>.
            </summary>
            <param name="records">records to send</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecordWithToken(Microsoft.Applications.Telemetry.DataModels.Record,System.String)">
            <summary>
            For general comments see <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecordWithToken(Microsoft.Applications.Telemetry.DataModels.Record,System.String)"/>.
            This implementation just forwards to <see cref="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecordsWithToken(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)"/>
            </summary>
            <param name="record">a record to send</param>
            <param name="tenantToken">tenant token to use to send the record</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecordsWithToken(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)">
            <summary>
            For general comments see <see cref="M:Microsoft.Applications.Telemetry.TelemetryManager.SendRecordsWithToken(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.DataModels.Record},System.String)"/>.
            </summary>
            <param name="records">records to send</param>
            <param name="tenantToken">tenant token to use to send the records</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.GetTelemetryEvents">
            <summary>
      <para>
        Gets <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> which provides notifications related to records sending.
      </para>
      <para>
        The method is thread-safe.
      </para>
    </summary><returns>
      <see cref="T:Microsoft.Applications.Telemetry.Events.TelemetryManagerEvents" /> associated with this Telemetry Manager
    </returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.WaitUntilAllRecordsAreSentAsync">
            <summary>
      <para>
        Wait until all records added to the library so far have been sent (or dropped
        e.g. because of network problems).
      </para>
      <para>
        This method is thread safe. You can call it many times in parallel as well as you can call
        <see cref="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)" /> when it's being executed.
      </para>
      <para>
        This method is VERY EXPENSIVE compared to others. It requires a lot of synchronization.
        It also slows down processing of new records, actually new records are not processed at
        all while this method is in progress. Instead, they are accumulated in dedicated queue
        and transfered to the primary queue when this operation is done.
      </para>
      <para>
        If second call to this method is issued before the first finished then the second call
        will wait until records added to the library between the first and the second call are sent.
        If there were no records added between two calls to 
        If there were no records added between two calls to 
        then the second one will be obviously flush no records.
      </para>
      <para>
        If execution of this method is longer than <c>TelemetryManagerSettings.WaitUntilNoRecordsTimeout</c>
        then <see cref="T:System.OperationCanceledException" /> exception is thrown.
        The timer starts after all previous calls to finished.
        The timer starts after all previous calls to finished.
      </para>
      <remarks>
        You mustn't call this method after a call to .
        You mustn't call this method after a call to .
      </remarks>
      <remarks>
        DISCLAMER: This method is not part of supported API. Currently this method is experimental
        and can change or be removed anytime without any notice!!!
      </remarks>
    </summary>
            <returns>Task representing job to be done</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.WaitUntilAllRecordsAreSent">
            <summary>
      <para>
        Wait until all records added to the library so far have been sent (or dropped
        e.g. because of network problems).
      </para>
      <para>
        This method is thread safe. You can call it many times in parallel as well as you can call
        <see cref="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.SendRecord(Microsoft.Applications.Telemetry.DataModels.Record)" /> when it's being executed.
      </para>
      <para>
        This method is VERY EXPENSIVE compared to others. It requires a lot of synchronization.
        It also slows down processing of new records, actually new records are not processed at
        all while this method is in progress. Instead, they are accumulated in dedicated queue
        and transfered to the primary queue when this operation is done.
      </para>
      <para>
        If second call to this method is issued before the first finished then the second call
        will wait until records added to the library between the first and the second call are sent.
        If there were no records added between two calls to 
        If there were no records added between two calls to 
        then the second one will be obviously flush no records.
      </para>
      <para>
        If execution of this method is longer than <c>TelemetryManagerSettings.WaitUntilNoRecordsTimeout</c>
        then <see cref="T:System.OperationCanceledException" /> exception is thrown.
        The timer starts after all previous calls to finished.
        The timer starts after all previous calls to finished.
      </para>
      <remarks>
        You mustn't call this method after a call to .
        You mustn't call this method after a call to .
      </remarks>
      <remarks>
        DISCLAMER: This method is not part of supported API. Currently this method is experimental
        and can change or be removed anytime without any notice!!!
      </remarks>
    </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.Dispose">
            <summary>
            Disposes the object. Before disposing wait until all added records
            are sent to the Collector.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.BlockCallerAndFlushQueuesIfNeededToInsertRecords(System.Collections.Generic.List{Microsoft.Applications.Telemetry.RecordWithMetadata})">
            <summary>
            Blocks the calling thread and tries to insert records into the inbound queue. If it can't, it will
            flush the queues and try again until it is able to insert all the records in the queue.
            </summary>
            <param name="recordsWithMetadatas">Records to insert in the queue.</param>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.StopAndWait">
            <summary>
            Mark that no new Records can arrive and wait until all already added Records get processed.
            After this call all underlying threads are stopped.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.WaitUntilNoRecordsAsync">
            <summary>
            Wait until all records get processed providing that no new records are added to _toBatcherQueue.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TelemetryManagerImpl.ValidateRecords(System.Collections.Generic.IEnumerable{Microsoft.Applications.Telemetry.RecordWithMetadata})">
            <summary>
            Validates all <paramref name="records"/>.
            Throws <see cref="T:System.ArgumentException"/> if a record is not valid.
            </summary>
            <param name="records">records to validate</param>
        </member>
        <member name="T:Microsoft.Applications.Telemetry.TokenPool">
            <summary>
            Class maintains pool of tokens.
            It is thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TokenPool.TryGetTokens(System.Int32)">
            <summary>
            Try acquire given number of tokens from pool.
            It is thread safe.
            </summary>
            <param name="number">number of tokens to acquire</param>
            <returns>Returns the number of tokens availble. The tokens returned are less than or equal to the requested tokens.</returns>
        </member>
        <member name="M:Microsoft.Applications.Telemetry.TokenPool.ReturnTokens(System.Int32)">
            <summary>
            Make the tokens available in the pool.
            It is thread safe.
            </summary>
            <param name="number">Number of tokens to be returned.</param>
        </member>
    </members>
</doc>
